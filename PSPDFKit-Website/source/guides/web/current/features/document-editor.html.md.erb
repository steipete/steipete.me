---
title: Document Editing
section: developers
---

The Document Editor is a separate component of PSPDFKit for Web, and it’s available for licenses with the document editing feature. It provides you and your users with a whole host of page editing features, including new page creation, page duplication, reordering, merging imported documents, rotation, and deletion. The resulting document can be saved or exported.

This guide describes how you can use the document editing API. To learn more about the UI, see the [Document Editing UI][document editor ui guide] article.

## Document Editor UI

The Document Editor’s UI is integrated into [`PSPDFKit.ViewState.InteractionMode`][] as a separate interaction mode. To switch to the document editing view, you can simply change the view mode to `PSPDFKit.ViewState.InteractionMode.DOCUMENT_EDITOR`:

```es
instance.setViewState(viewState =>
  viewState.set(
    "interactionMode",
    PSPDFKit.ViewState.InteractionMode.DOCUMENT_EDITOR
  )
);
```

If your license has the document editing feature, [`PSPDFKit.defaultToolbarItems`][] includes a [`PSPDFKit.ToolbarItem`][], which can be used to facilitate switching to document editing mode via the user interface. This button is added to the main toolbar.

You can remove it from the UI by setting the corresponding [`PSPDFKit.Configuration.toolbarItems`][] value:

```es
PSPDFKit.load({
  toolbarItems: PSPDFKit.defaultToolbarItems.filter(
    toolbarItem => toolbarItem.type !== "document-editor"
  )
});
```

## Programmatic Access

In addition to a comprehensive UI, the Document Editor also comes with convenient API methods that you can use to perform document editing in code.

### PSPDFKit.Instance#applyOperations(operations)

Calling the [`PSPDFKit.Instance#applyOperations(operations)`][] API method with an array of [`PSPDFKit.DocumentOperation`][] as its argument will perform the provided operations on the current document. Once the operations have been performed, the current document will be reloaded and updated.

All the provided operations will be performed in a single call to `instance.applyOperations()`. After applying each operation in the order it comes in in the provided array, a temporary document will result from it; the next operation in the array will be applied on this temporary document, and not on the original one. This means that the page indexes referenced in an operation should take into account any changes in the document that have been performed by previous operations in the array.

When using [PSPDFKit Instant][], if a client performs modifications in a shared document instance, other clients will lose access to the document and will be prompted to update their local views. If they don’t reload the document, they won’t be able to persist any further changes they make to it until they reload the browser.

These are the data types used by the Document Editor API:

<a name="api_types"></a>

```es
type Rotation = 0 | 90 | 180 | 270;

type AddPageConfiguration = {
  backgroundColor: PSPDFKit.Color,
  pageWidth: number,
  pageHeight: number,
  rotateBy: Rotation,
  insets?: PSPDFKit.Geometry.Rect
};

type Range = [min, max]; // 'min' and 'max' are inclusive.

type ImportPageIndex = Array<number | Range>;

type DocumentOperation =
  | { type: "addPage", afterPageIndex: number, ...AddPageConfiguration }
  | { type: "addPage", beforePageIndex: number, ...AddPageConfiguration }
  | { type: "duplicatePages", pageIndexes: Array<number> }
  | { type: "movePages", pageIndexes: Array<number>, afterPageIndex: number }
  | { type: "movePages", pageIndexes: Array<number>, beforePageIndex: number }
  | { type: "rotatePages", pageIndexes: Array<number>, rotateBy: Rotation }
  | { type: "keepPages", pageIndexes: Array<number> }
  | { type: "removePages", pageIndexes: Array<number> }
  | {
      type: "importDocument",
      importedPageIndexes?: ImportPageIndex,
      beforePageIndex: number,
      treatImportedDocumentAsOnePage?: boolean,
      document: File | Blob
    };
```

### PSPDFKit.Instance#exportPDFWithOperations(operations)

Calling the [`PSPDFKit.Instance#exportPDFWithOperations(operations)`][] API method with an array of [`PSPDFKit.DocumentOperation`][] as its argument will create a modified copy of the current document on which the provided operations have been performed. Using this API method will not affect the current document.

The method will resolve with an `ArrayBuffer` that can be used, for example, to save the resulting document:

```es
async () => {
  const buffer = await instance.exportPDFWithOperations([
    {
      type: "rotatePages",
      pageIndexes: [0],
      rotateBy: 270
    }
  ]);
  const blob = new Blob([buffer], { type: "application/pdf" });
  if (navigator.msSaveOrOpenBlob) {
    navigator.msSaveOrOpenBlob(blob, "download.pdf");
  } else {
    let a = document.createElement("a");
    const objectUrl = window.URL.createObjectURL(blob);
    a.href = objectUrl;
    a.style = "display: none";
    a.download = "download.pdf";
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(objectUrl);
  }
};
```

### Operations

What follows is a list of the operations that are available in the Document Editor API. All the examples use the `instance.applyOperations()` method, but they also apply to `instance.exportPDFWithOperations()`.

#### addPage

Using `addPage` adds a blank page before or after the specified page index using the provided configuration:

```es
instance.applyOperations([
  {
    type: "addPage",
    afterPageIndex: 1, // Add new page after page 1.
    backgroundColor: new PSPDFKit.Color({ r: 100, g: 200, b: 255 }), // Set the new page background color.
    pageWidth: 750,
    pageHeight: 1000,
    rotateBy: 0 // No rotation.
    // Insets are optional.
  }
]);
```

#### keepPages

Using `keepPages` removes all the pages from the document except for the pages specified in the `pageIndexes` array:

```es
instance.applyOperations([
  {
    type: "keepPages",
    pageIndexes: [0, 1, 2] // Remove all pages except pages 0 to 2.
  }
]);
```

#### duplicatePages

Using `duplicatePages` duplicates the pages specified in the `pageIndexes` array. Each duplicated page will be inserted after the page being duplicated:

```es
instance.applyOperations([
  {
    type: "duplicatePages",
    pageIndexes: [0, 4] // Duplicate pages 0 and 4, and insert each duplicate after the original page.
  }
]);
```

#### movePages

Using `movePages` moves the pages specified in the `pageIndexes` array before or after the specified page index:

```es
instance.applyOperations([
  {
    type: "movePages",
    pageIndexes: [0, 4], // Move pages 0 and 4.
    beforePageIndex: 7 // The specified pages will be moved after page 7.
  }
]);
```

#### rotatePages

Using `rotatePages` rotates the pages specified in the `pageIndexes` array by the degrees indicated in `rotateBy`. Only multiples of 90 under 360 are allowed as values:

```es
instance.applyOperations([
  {
    type: "rotatePages",
    pageIndexes: [0], // Rotate page 0.
    rotateBy: 90 // Rotate page 90 degrees clockwise.
  }
]);
```

#### removePages

Using `removePages` removes the pages specified in the `pageIndexes` array:

```es
instance.applyOperations([
  {
    type: "removePages",
    pageIndexes: [8, 9, 11] // Remove pages 8, 9, and 11.
  }
]);
```

#### importDocument

Using `importDocument` imports the provided document before or after the specified page index.

`importedPageIndexes` may be used to import specific pages or a range of pages (see both `ImportPageIndex` in the [typespec](#api_types) and the examples below). If left blank, the entire document will be imported.

If the same document’s `Blob` object is used in the same operations array for different operations, the same `Blob` object will be reused for all of them:

```es
instance.applyOperations([
  {
    type: "importDocument",
    afterPageIndex: 10, // Import document after page 10.
    treatImportedDocumentAsOnePage: false, // All the imported document pages will be treated separately for other operations.
    document: blob // Document to import.
  }
]);
```

If the `treatImportedDocumentAsOnePage` property is set to `true`, all of the imported document pages will be treated as a single one for the other operations that are about to be performed. This can be useful for some situations (e.g. you want to apply a rotation to all of the pages of the imported document). After all the current operations are applied to the document, the imported pages will behave like regular pages in the document.

Here is an example that uses `fetch` to retrieve an external document, converts it to a `Blob`, and passes it in an `importDocument` operation:

```es
fetch("imported.pdf")
  .then(res => {
    if (!res.ok) {
      throw res;
    }
    return res;
  })
  .then(res => res.blob())
  .then(blob => {
    instance.applyOperations([
      {
        type: "importDocument",
        importedPageIndexes: [2, 4, [7, 10]],
        beforePageIndex: 3,
        document: blob,
        treatImportedDocumentAsOnePage: false
      }
    ]);
  });
```

#### Multiple Operations

Operations can be chained in a single call to `instance.applyOperations()` or `instance.exportPDFWithOperations()`. When performing multiple operations, always keep in mind that the page indices in each operation must reference the corresponding page indices that result from performing the previous operation.

In order to better understand the implications of this behavior, let’s see a failing example. We’ll assume the current document has six pages, which are indexed from `0` to `5`:

```es
instance.applyOperations([
  // First, we remove the last two pages from the document.
  {
    type: "removePages",
    pageIndexes: [4, 5] // Remove pages 4 and 5.
  },
  // The resulting document would have four pages, indexed from `0` to `3`.
  // The next operation will throw an error, as there is no longer a page with index 5.
  {
    type: "rotatePages",
    pageIndexes: [5], // Rotate page 5.
    rotateBy: 90 // Rotate page 90 degrees clockwise.
  }
]);
```

On the other hand, this next example would succeed in spite of operating on a page that does not exist in the original document (we’ll assume we have a six-page document again):

```es
instance.applyOperations([
  // First, we add a page at the beginning of the document.
  {
    type: "addPage",
    beforePageIndex: 0, // Add new page after page 1.
    backgroundColor: new PSPDFKit.Color({ r: 255, g: 255, b: 255 }), // Set white as the new page background color.
    pageWidth: 750,
    pageHeight: 1000,
    rotateBy: 0 // No rotation.
    // Insets are optional.
  },
  // The resulting document would have 7 pages now, indexed from `0` to `6`.
  // The next operation will succeed, as page 6 now exists.
  {
    type: "rotatePages",
    pageIndexes: [6], // Rotate page 6.
    rotateBy: 90 // Rotate page 90 degrees clockwise.
  }
]);
```

[document editor ui guide]: https://pspdfkit.com/guides/web/current/features/document-editor-ui/
[`pspdfkit.viewstate.interactionmode`]: https://pspdfkit.com/api/web/PSPDFKit.ViewState.html#interactionMode
[`pspdfkit.defaulttoolbaritems`]: https://pspdfkit.com/api/web/PSPDFKit.html#.defaultToolbarItems
[`pspdfkit.toolbaritem`]: https://pspdfkit.com/api/web/PSPDFKit.ToolbarItem.html
[`pspdfkit.configuration.toolbaritems`]: https://pspdfkit.com/api/web/PSPDFKit.Configuration.html#toolbarItems
[`pspdfkit.instance#applyoperations(operations)`]: https://pspdfkit.com/api/web/PSPDFKit.Instance.html#applyOperations
[`pspdfkit.instance#exportpdfwithoperations(operations)`]: https://pspdfkit.com/api/web/PSPDFKit.Instance.html#exportPDFWithOperations
[`pspdfkit.documentoperation`]: https://pspdfkit.com/api/web/PSPDFKit.DocumentOperation.html
