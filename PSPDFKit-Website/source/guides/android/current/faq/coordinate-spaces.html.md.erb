---
title: Coordinate Space Conversions
section: developers

alternate_platform_links:
  web: "pspdfkit-for-web/coordinate-spaces"
  server: "pspdfkit-server/coordinate-spaces"
---

By specification, PDF documents have their own coordinate space, which is different from the coordinate space used by Android’s views. While Android views have their origin in the top-left corner, with y coordinates increasing in a _downward_ direction, the y coordinates in PDF documents increase _upward_, starting in the bottom-left corner.

![PDF page coordinates](/images/guides/shared/faq/document-coordinate-space.gif)

PSPDFKit provides a set of easy-to-use methods for transforming between PDF and view coordinate spaces. For example, the following code uses the PSPDFKit conversion API to retrieve the onscreen coordinates of an annotation:

[==

```kotlin
// Get the PDF coordinates of the annotation.
val annotationRect = someAnnotation.boundingBox
// Get the view projection for transforming between the view coordinates and PDF coordinates.
val viewProjection = fragment.viewProjection
// Convert the annotation's PDF coordinates to view coordinates (pixels).
viewProjection.toViewRect(annotationRect, someAnnotation.pageIndex)
```

```java
// Get the PDF coordinates of the annotation.
final RectF annotationRect = someAnnotation.getBoundingBox();
// Get the view projection for transforming between the view coordinates and PDF coordinates.
ViewProjection viewProjection = fragment.getViewProjection();
// Convert the annotation's PDF coordinates to view coordinates (pixels).
viewProjection.toViewRect(annotationRect, someAnnotation.getPageIndex());
```

==]

> **ℹ️ Note:** Since every page of a PDF document has its own coordinate space, the conversion method also takes a `page` argument.

## Conversion Methods

[`ViewProjection`][] can be accessed by [`PdfFragment#getViewProjection()`][get view projection] and has a set of convenient methods for converting between PDF and view coordinates.

- [`toViewPoint(PointF, int)`][viewprojection toviewpoint] and [`toPdfPoint(PointF, int)`][viewprojection topdfpoint] convert a single point (stored within a
  [`PointF`][] instance) from page coordinates to view coordinates and vice versa, respectively.

- [`toViewRect(RectF, int)`][viewprojection toviewrect] and [`toPdfRect(RectF, int)`][viewprojection topdfrect] convert a rectangle (stored within a [`RectF`][] instance) from page coordinates to view coordinates and vice versa, respectively.

[`PdfProjection`][] can be accessed by [`PdfDocument#getPdfProjection()`][get pdf projection] and has a set of convenient methods for converting between PDF and raw coordinates.

- [`toRawPoint(PointF, int)`][pdfprojection torawpoint] and [`toNormalizedPoint(PointF, int)`][pdfprojection tonormalizedpoint] convert a single point (stored within a
  [`PointF`][] instance) from normalized page coordinates to raw page coordinates and vice versa, respectively.

- [`toRawRect(RectF, int)`][pdfprojection torawrect] and [`toPdfRect(RectF, int)`][pdfprojection topdfrect] convert a rectangle (stored within a [`RectF`][] instance) from normalized page coordinates to raw coordinates and vice versa, respectively.

## Converting between the Normalized PDF Coordinate Space and the Raw PDF Coordinate Space

The PSPDFKit API uses a normalized page coordinate space, which always puts the origin in the bottom-left corner of the visible area of the page.

You can convert from the raw PDF coordinate space to PSPDFKit’s normalized space using the conversion methods in [`PdfProjection`][]. For example, to place a 100-point by 100-point square annotation at the page origin stored in the PDF, use code like the following:

[==

```kotlin
val pageIndex = 0
// Get the PDF projection for transforming between the raw coordinates and PDF coordinates.
val pdfProjection = document.pdfProjection
val rawRect = RectF(0f, 100f, 100f, 0f)
// Convert the raw PDF coordinates to normalized PDF coordinates.
val normalizedPdfRect = pdfProjection.toPdfRect(rawRect, pageIndex)
// Create a new square annotation using the normalized coordinates.
val annotation = SquareAnnotation(pageIndex, normalizedPdfRect)
```

```java
int pageIndex = 0;
// Get the PDF projection for transforming between the raw coordinates and PDF coordinates.
PdfProjection pdfProjection = document.getPdfProjection();
RectF rawRect = new RectF(0f, 100f, 100f, 0f);
// Convert the raw PDF coordinates to normalized PDF coordinates.
RectF normalizedPdfRect = pdfProjection.toPdfRect(rawRect, pageIndex);
// Create a new square annotation using the normalized coordinates.
SquareAnnotation annotation = new SquareAnnotation(pageIndex, normalizedPdfRect);
```

==]

> **ℹ️ Note:** The annotation might not end up visible if there is a crop box offset.

To convert from the normalized PDF coordinate space used by PSPDFKit to the raw PDF coordinate space, use the [`PdfProjection#toRawPoint(PointF, int)`][pdfprojection torawpoint] or [`PdfProjection#toRawRect(RectF, int)`][pdfprojection torawrect] conversion method. For example, to read an annotation’s bounding box as it would be serialized in the PDF, use the following:

[==

```kotlin
val pageIndex = 0
// Get the PDF projection for transforming between the raw coordinates and PDF coordinates.
val pdfProjection = document.pdfProjection
// Get the annotation whose bounding box needs to be read.
val annotation : SquareAnnotation = ...
// Get the annotation bounding box.
val normalizedRect = annotation.boundingBox
// Convert the normalized PDF coordinates to raw PDF coordinates.
val rawRect = pdfProjection.toRawRect(normalizedRect, pageIndex)
```

```java
int pageIndex = 0;
// Get the PDF projection for transforming between the raw coordinates and PDF coordinates.
PdfProjection pdfProjection = document.getPdfProjection();
// Get the annotation whose bounding box needs to be read.
SquareAnnotation annotation = ...
// Get the annotation bounding box.
RectF normalizedRect = annotation.getBoundingBox();
// Convert the normalized PDF coordinates to raw PDF coordinates.
RectF rawRect = pdfProjection.toRawRect(normalizedRect, pageIndex);
```

==]

## Conversion Matrix

If you need more control over the coordinate conversion, you can also retrieve a [`Matrix`][] object using:

- [`PdfProjection#getNormalizedToRawTransformation(int)`][pdfprojection normalized-to-raw], which holds the normalized-to-raw transformation.

- [`PdfProjection#getRawToNormalizedTransformation(int)`][pdfprojection raw-to-normalized], which holds the raw-to-normalized transformation.

- [`ViewProjection#getPageToViewTransformation(int, Matrix)`][viewprojection page-to-view], which holds the page-to-view transformation. The second parameter can take either a matrix object you would like to reuse, or `null` if you would like to create a new object.

- [`ViewProjection#getViewToPageTransformation(int, Matrix)`][viewprojection view-to-page], which holds the view-to-page transformation. The second parameter can take either a matrix object you would like to reuse, or `null` if you would like to create a new object.

## How to Convert between Raster Image Pixels and Points

The concept of resolution does not apply to PDF documents unless they have been converted into raster images, i.e. images whose dimensions are expressed in pixels. The default unit PSPDFKit returns for page sizes is the point, which is easily converted into inches by taking into account the fact that 1 inch is equal to 72 points. Inch separation results from dividing the size in points of a particular page by 72. Resolution, expressed in DPI (dots per inch), is thus the result of dividing the page size in points by the inch separation. To summarize, these are the relations you have to consider when you need to convert between points/inches and pixels in PDF:

1 inch = 72 points<br>
Inch separation = points / 72<br>
DPI (resolution) = pixels / inch separation

Note that, since PDF 1.6, the relationship between inches and points may be specified as greater than 1⁄72 by means of the `UserUnit` entry of the page dictionary. See table 30 on page 79 of the [PDF 1.7 specification][] for more information.

[`matrix`]: http://developer.android.com/reference/android/graphics/Matrix.html
[`pointf`]: http://developer.android.com/reference/android/graphics/PointF.html
[`rectf`]: http://developer.android.com/reference/android/graphics/RectF.html
[`viewprojection`]: https://pspdfkit.com/api/android/reference/com/pspdfkit/projection/ViewProjection.html
[`pdfprojection`]: https://pspdfkit.com/api/android/reference/com/pspdfkit/projection/PdfProjection.html
[pdf 1.7 specification]: http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/PDF32000_2008.pdf
[viewprojection toviewpoint]: https://pspdfkit.com/api/android/reference/com/pspdfkit/projection/ViewProjection.html#toViewPoint(android.graphics.PointF,%20int)
[viewprojection toviewrect]: https://pspdfkit.com/api/android/reference/com/pspdfkit/projection/ViewProjection.html#toViewRect(android.graphics.RectF,%20int)
[viewprojection topdfpoint]: https://pspdfkit.com/api/android/reference/com/pspdfkit/projection/ViewProjection.html#toPdfPoint(android.graphics.PointF,%20int)
[viewprojection topdfrect]: https://pspdfkit.com/api/android/reference/com/pspdfkit/projection/ViewProjection.html#toPdfRect(android.graphics.RectF,%20int)
[pdfprojection torawpoint]: https://pspdfkit.com/api/android/reference/com/pspdfkit/projection/PdfProjection.html#toRawPoint(android.graphics.PointF,%20int)
[pdfprojection torawrect]: https://pspdfkit.com/api/android/reference/com/pspdfkit/projection/PdfProjection.html#toRawRect(android.graphics.RectF,%20int)
[pdfprojection tonormalizedpoint]: https://pspdfkit.com/api/android/reference/com/pspdfkit/projection/PdfProjection.html#toNormalizedPoint(android.graphics.PointF,%20int)
[pdfprojection topdfrect]: https://pspdfkit.com/api/android/reference/com/pspdfkit/projection/PdfProjection.html#toPdfRect(android.graphics.RectF,%20int)
[viewprojection view-to-page]: https://pspdfkit.com/api/android/reference/com/pspdfkit/projection/ViewProjection.html#getViewToPageTransformation(int,%20android.graphics.Matrix)
[viewprojection page-to-view]: https://pspdfkit.com/api/android/reference/com/pspdfkit/projection/ViewProjection.html#getPageToViewTransformation(int,%20android.graphics.Matrix)
[pdfprojection raw-to-normalized]: https://pspdfkit.com/api/android/reference/com/pspdfkit/projection/PdfProjection.html#getRawToNormalizedTransformation(int)
[pdfprojection normalized-to-raw]: https://pspdfkit.com/api/android/reference/com/pspdfkit/projection/PdfProjection.html#getNormalizedToRawTransformation(int)
[get view projection]: https://pspdfkit.com/api/android/reference/com/pspdfkit/ui/PdfFragment.html#getViewProjection()
[get pdf projection]: https://pspdfkit.com/api/android/reference/com/pspdfkit/document/PdfDocument.html#getPdfProjection()
