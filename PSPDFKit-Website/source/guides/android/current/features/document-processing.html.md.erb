---
title: Document Processing
section: developers
---

PSPDFKit allows editing, splitting, and merging of documents, as well as annotation flattening using the [`PdfProcessor`][] class.

> **Important:** When using the processor API before loading a document, you must ensure PSPDFKit is fully initialized or processing will fail. Check out our [Adding the License Key guide][pspdfkit guide adding the license key] for more information.

## Extraction of Pages

[`PdfProcessor`][] can export pages from one document into another document. You can choose to extract a single page, a range of pages, or even multiple page ranges:

[==

```kotlin
// Pages numbers start at 0. This range therefore contains the fifth page of the document.
val task = PdfProcessorTask.fromDocument(document).keepPages(setOf(4))

// Keep pages 5, 6, and 7.
val task = PdfProcessorTask.fromDocument(document).keepPages(setOf(4, 5, 6))

// Remove the first page.
val task = PdfProcessorTask.fromDocument(document).removePages(setOf(0))
```

```java
// Pages numbers start at 0. This range therefore contains the fifth page of the document.
PdfProcessorTask task = PdfProcessorTask.fromDocument(document).keepPages(new HashSet<Integer>(Arrays.asList(4));

// Keep pages 5, 6, and 7.
PdfProcessorTask task = PdfProcessorTask.fromDocument(document).keepPages(new HashSet<Integer>(Arrays.asList(4, 5, 6));

// Remove the first page.
PdfProcessorTask task = PdfProcessorTask.fromDocument(document).removePages(new HashSet<Integer>(Arrays.asList(0));
```

==]

After creating [`PdfProcessorTask`][], you can start the extraction of the pages by calling the [`PdfProcessor#processDocumentAsync`][] method or the [`PdfProcessor#processDocument`][] method. Note that by default, all annotations will be preserved. You can queue multiple operations on a document by calling multiple methods on a [`PdfProcessorTask`][] object before starting processing. The operations will be executed in the same order as your method calls:

[==

```kotlin
val outputFile = File(getFilesDir(), "extracted-pages.pdf")

// Keep pages 5, 6, and 7.
val task = PdfProcessorTask.fromDocument(document).keepPages(setOf(4, 5, 6))
PdfProcessor.processDocumentAsync(task, outputFile)
            // Run processing on the background thread.
            .subscribeOn(Schedulers.io())
            // Publish results on the main thread so we can update the UI.
            .observeOn(AndroidSchedulers.mainThread())
            .subscribe(
                { progress: PdfProcessor.ProcessorProgress -> Toast.makeText(context, "Processing page ${progress.pagesProcessed}/${progress.totalPages}", Toast.LENGTH_SHORT).show() },
                { error: Throwable -> Toast.makeText(context, "Processing has failed: ${error.message}", Toast.LENGTH_SHORT).show() },
                { Toast.makeText(context, "Processing has been completed successfully.", Toast.LENGTH_SHORT).show() }
            )
```

```java
final File outputFile = new File(getFilesDir(), "extracted-pages.pdf");

// Keep pages 5, 6, and 7.
PdfProcessorTask task = PdfProcessorTask.fromDocument(document).keepPages(new HashSet<Integer>(Arrays.asList(4, 5, 6));
PdfProcessor.processDocumentAsync(task, outputFile)
            // Run processing on the background thread.
            .subscribeOn(Schedulers.io())
            // Publish results on the main thread so we can update the UI.
            .observeOn(AndroidSchedulers.mainThread())
            .subscribe(new DefaultSubscriber<PdfProcessor.ProcessorProgress>() {
                @Override
                public void onComplete() {
                    Toast.makeText(context, "Processing has been completed successfully.", Toast.LENGTH_SHORT).show();
                }

                @Override
                public void onError(Throwable e) {
                    Toast.makeText(context, "Processing has failed:" + e.getMessage(), Toast.LENGTH_SHORT).show();
                }

                @Override
                public void onNext(PdfProcessor.ProcessorProgress processorProgress) {
                    Toast.makeText(context, "Processing page " + processorProgress.getPagesProcessed() + "/" + processorProgress.getTotalPages(), Toast.LENGTH_SHORT).show();
                }
            });
```

==]

**ðŸ’¡ Tip:** You can use page extraction to merge pages of two or more documents. All you need to do is load a compound [`PdfDocument`][] â€” for example, by using [`PSPDFKit#openDocuments`][] or any of the [`PdfActivity#showDocuments`][] methods. Have a look at `DocumentProcessingExample` inside the Catalog app for a demo of this.

## Annotation Flattening

When flattening an annotation, the annotation is removed from the document while its visual representation is kept intact. A flattened annotation is still visible but is no longer editable by your users or by your app. This can be used to, for example, fix annotations onto your document. If not otherwise specified, the processor will keep all annotations as they are.

To change how annotations are processed, use the [`PdfProcessorTask#changeAllAnnotations`][], [`PdfProcessorTask#changeAnnotationsOfType`][], or [`PdfProcessorTask#changeAnnotations`][] method calls:

[==

```kotlin
// Process all pages of the document, flattening all of its annotations.
val task = PdfProcessorTask.fromDocument(document).changeAllAnnotations(PdfProcessorTask.AnnotationProcessingMode.FLATTEN)
PdfProcessor.processDocumentAsync(...)

// Flatten only free text annotations, and copy everything else.
val task = PdfProcessorTask.fromDocument(document).changeAllAnnotations(PdfProcessorTask.AnnotationProcessingMode.KEEP)
                                           .changeAnnotationsOfType(AnnotationType.FREETEXT, PdfProcessorTask.AnnotationProcessingMode.FLATTEN)
PdfProcessor.processDocumentAsync(...)
```

```java
// Process all pages of the document, flattening all of its annotations.
PdfProcessorTask task = PdfProcessorTask.fromDocument(document)
				.changeAllAnnotations(PdfProcessorTask.AnnotationProcessingMode.FLATTEN);
PdfProcessor.processDocumentAsync(...);

// Flatten only free text annotations, and copy everything else.
PdfProcessorTask task = PdfProcessorTask.fromDocument(document)
				.changeAllAnnotations(PdfProcessorTask.AnnotationProcessingMode.KEEP)
				.changeAnnotationsOfType(AnnotationType.FREETEXT, PdfProcessorTask.AnnotationProcessingMode.FLATTEN);
PdfProcessor.processDocumentAsync(...);
```

==]

## Form Flattening

Form elements are of a special annotation type, [`AnnotationType::WIDGET`][]. You can use the above-mentioned method to control flattening for all the form elements inside the document. If you want to flatten only form elements of a specific [`FormType`][], you can use [`PdfProcessorTask#changeFormsOfType`][] instead.

For example, you might not want to flatten a signature annotation, as only the visual representation of the digital signature would be included in the resulting document and not in the actual digital signature.

## Rotating Pages

Page rotation is supported for 90, 180, and 270 degrees:

[==

```kotlin
// Rotate all pages of the document by 90 degrees.
val task = PdfProcessorTask.fromDocument(document)
for(pageIndex in 0..document.pageCount-1) {
    task.rotatePage(pageIndex, 90)
}

PdfProcessor.processDocumentAsync(...)
```

```java
// Rotate all pages of the document by 90 degrees.
final PdfProcessorTask task = PdfProcessorTask.fromDocument(document);
for (int pageIndex = 0, pageCount = document.getPageCount(); pageIndex < pageCount; pageIndex++) {
    task.rotatePage(pageIndex, 90);
}

PdfProcessor.processDocumentAsync(...);
```

==]

## Protecting a Document with a Password

A PDF document can be encrypted to protect its contents from unauthorized access.

[`PdfProcessor`][] supports creating encrypted password-protected documents by setting a password via [`DocumentSaveOptions#setPassword`][]:

[==

```kotlin
val task = PdfProcessorTask.fromDocument(document)

// Create default document save options.
var documentSaveOptions = document.getDefaultDocumentSaveOptions()
// This will create an encrypted password-protected document.
documentSaveOptions.password = "password"

// Use created save options when processing the document.
PdfProcessor.processDocumentAsync(task, outputFile, documentSaveOptions)
```

```java
final PdfProcessorTask task = PdfProcessorTask.fromDocument(document);

// Create default document save options.
DocumentSaveOptions documentSaveOptions = document.getDefaultDocumentSaveOptions();
// This will create an encrypted password-protected document.
documentSaveOptions.setPassword("password");

// Use created save options when processing the document.
PdfProcessor.processDocumentAsync(task, outputFile, documentSaveOptions);
```

==]

## Adding Pages from Other Documents

[`PdfProcessor`][] also allows you to copy a single page or entire documents into other documents using [`NewPage.fromPage()`][]. In this way, you can also merge multiple documents together:

[==

```kotlin
val task = PdfProcessorTask.fromDocument(document)
for (i in 0 until otherDocument.pageCount) {
    // Add all pages from the other document to the end of the original document.
    task.addNewPage(NewPage.fromPage(otherDocument, i).build(), document.pageCount + i)
}

PdfProcessor.processDocumentAsync(...)
```

```java
PdfProcessorTask task = PdfProcessorTask.fromDocument(document);
for (int i = 0; i < otherDocument.getPageCount(); i++) {
    // Add all pages from the other document to the end of the original document.
    task.addNewPage(NewPage.fromPage(otherDocument, i).build(), document.getPageCount() + i);
}

PdfProcessor.processDocument(...);
```

==]

[`pdfactivity#showdocuments`]: https://pspdfkit.com/api/android/reference/com/pspdfkit/ui/PdfActivity.html#showDocuments(android.content.Context,%20java.util.List<android.net.Uri>,%20com.pspdfkit.configuration.activity.PdfActivityConfiguration)
[`pspdfkit#opendocuments`]: https://pspdfkit.com/api/android/reference/com/pspdfkit/PSPDFKit.html#openDocuments(android.content.Context,%20java.util.List<android.net.Uri>)
[`pdfprocessor`]: https://pspdfkit.com/api/android/reference/com/pspdfkit/document/processor/PdfProcessor.html
[`pdfprocessortask`]: https://pspdfkit.com/api/android/reference/com/pspdfkit/document/processor/PdfProcessorTask.html
[`pdfprocessortask#changeallannotations`]: https://pspdfkit.com/api/android/reference/com/pspdfkit/document/processor/PdfProcessorTask.html#changeAllAnnotations(com.pspdfkit.document.processor.PdfProcessorTask.AnnotationProcessingMode)
[`pdfprocessortask#changeannotationsoftype`]: https://pspdfkit.com/api/android/reference/com/pspdfkit/document/processor/PdfProcessorTask.html#changeAnnotationsOfType(com.pspdfkit.annotations.AnnotationType,%20com.pspdfkit.document.processor.PdfProcessorTask.AnnotationProcessingMode)
[`pdfprocessortask#changeannotations`]: https://pspdfkit.com/api/android/reference/com/pspdfkit/document/processor/PdfProcessorTask.html#changeAnnotations(java.util.List<com.pspdfkit.annotations.Annotation>,%20com.pspdfkit.document.processor.PdfProcessorTask.AnnotationProcessingMode)
[`pdfprocessor#processdocumentasync`]: https://pspdfkit.com/api/android/reference/com/pspdfkit/document/processor/PdfProcessor.html#processDocumentAsync(com.pspdfkit.document.processor.PdfProcessorTask,%20java.io.File)
[`pdfprocessor#processdocument`]: https://pspdfkit.com/api/android/reference/com/pspdfkit/document/processor/PdfProcessor.html#processDocument(com.pspdfkit.document.processor.PdfProcessorTask,%20java.io.File)
[`documentsaveoptions`]: https://pspdfkit.com/api/android/reference/com/pspdfkit/document/DocumentSaveOptions.html
[`documentsaveoptions#setpassword`]: https://pspdfkit.com/api/android/reference/com/pspdfkit/document/DocumentSaveOptions.html#setPassword(java.lang.String)
[pspdfkit guide adding the license key]: ../../getting-started/adding-the-license-key/#using-the-license-key
[`documentsaveoptions`]: https://pspdfkit.com/api/android/reference/com/pspdfkit/document/DocumentSaveOptions.html
[`documentsaveoptions#setpassword`]: https://pspdfkit.com/api/android/reference/com/pspdfkit/document/DocumentSaveOptions.html#setPassword(java.lang.String)
[`annotationtype::widget`]: https://pspdfkit.com/api/android/reference/com/pspdfkit/annotations/AnnotationType.html
[`formtype`]: https://pspdfkit.com/api/android/reference/com/pspdfkit/forms/FormType.html
[`pdfprocessortask#changeformsoftype`]: https://pspdfkit.com/api/android/reference/com/pspdfkit/document/processor/PdfProcessorTask.html#changeFormsOfType(com.pspdfkit.forms.FormType,%20com.pspdfkit.document.processor.PdfProcessorTask.AnnotationProcessingMode)
[`newpage.frompage()`]: https://pspdfkit.com/api/android/reference/com/pspdfkit/document/processor/NewPage.html#fromPage(com.pspdfkit.document.PdfDocument,%20int)
