---
title: Trusted Document Sources
section: developers

secret: true
---

For most PSPDFKit customers, we offer licenses of PSPDFKit that are tied to one specific `applicationId`. However, this is not suitable for distributing PSPDFKit with libraries that are deployed to many different apps with different app identifiers. Therefore, we provide an alternative licensing model called Trusted Document Sources.

## Use Cases

Trusted Document Sources work by signing documents using asymmetric crypto algorithms. This limits PSPDFKit to open documents served by a single trusted source. A trusted source can be:

- A server, hosted by you or in the cloud.
- A different app, running on a user’s mobile phone.
- Any other hardware or software that can provide PDF documents to your app.

## How It Works

Trusted sources rely on the creation of a public-private RSA key pair that is used to sign and validate PDF files. The private key is stored on a secure server, whereas the public key is encoded into the PSPDFKit license string and shipped with your library. Here’s how signing and validation works:

1. For the PDF file `A.pdf`, the server creates and stores a signature of the first XXX bytes using its private key.
1. The client downloads both the PDF file `A.pdf` and the signature from the server.
1. When loading the PDF file, PSPDFKit will ask the app for the signature of your trusted source.
1. The signature is validated successfully and PSPDFKit continues loading the PDF file.

## Loading a Signed Document

If the PSPDFKit license string in your app encodes the public key of a trusted source, PSPDFKit will reject the loading of PDFs without signatures or with invalid signatures. To load a document using a signature, use `PdfDocumentLoader.openDocument(Context, DocumentSource)` and provide a `DocumentSource` that includes the signature string. For example:

```kotlin
val source = DocumentSource("A.pdf", null, "013e6c26b1f0c0816aec5d5...328a75f2db666094371c83860")
val document = PdfDocumentLoader.openDocument(context, source)
```

## Creating a Document Signature

A document signature consists of three parts:

- The signature version. This is always `0x01`.
- The signature. This is the encrypted SHA256 hash of the document.
- The SHA256 hash itself.

Here’s how the signature looks:

```
|------|-------------------|---------------|
| 0x01 | Signature data... | SHA256 digest |
|------|-------------------|---------------|
```
