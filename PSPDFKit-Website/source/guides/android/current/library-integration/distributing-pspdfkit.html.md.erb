---
title: Distributing PSPDFKit via Maven
section: developers

secret: true
---

If you are building a library for Android that makes use of PSPDFKit, you need to distribute the PSPDFKit library AAR to the users of your library. This guide will take you through the necessary steps.

## PSPDFKit as a Transitive Dependency

The simplest way to deliver PSPDFKit to all users of your library is to provide your own library using Maven and to declare PSPDFKit as a [transitive dependency][].

As a transitive dependency, PSPDFKit will automatically be included alongside your own library without requiring your users to include the PSPDFKit library themselves. Furthermore, if your library is integrated into an app that is also using PSPDFKit on its own, Maven will take over versioning and conflict resolution.

> **ðŸ’¡ Tip:** Using Maven for dependencies is the de facto standard when developing Android applications and, as such, most developers expect it to work. We highly recommend switching to Maven-based distribution of your library if you havenâ€™t already.

### Creating a POM File

When distributing your library using Maven, you need to create a POM file as part of the publishing process. This is usually handled by publishing tools â€” for example, the [Gradle Maven publisher][]. Inside your libraryâ€™s POM file, PSPDFKit should be listed within the `<dependencies>` element, like this:

```your-library.pom
<project>
  ...
  <dependencies>
    ...
    <dependency>
      <groupId>com.pspdfkit</groupId>
      <artifactId>pspdfkit</artifactId>
      <version><%= latest_version(:android) %></version>
    </dependency>
  </dependencies>
</project>
```

Whenever your users integrate your library into their projects, Maven will automatically try to discover and download all transitive dependencies, including PSPDFKit. The next section will describe the steps necessary to serve PSPDFKit to your customers.

## Distribution via Maven

Access to the PSPDFKit Maven repository is limited to PSPDFKit customers and requires valid customer credentials. These credentials should at no point be shared with your library users. Instead, you should set up your own Maven repository that acts as a proxy to the PSPDFKit repository. That way, you can also distribute your own library and PSPDFKit via the same repository, which eases integration for your users.

### Setting up a Maven Proxy

The simplest way to set up a Maven repository and a Maven proxy is by using the official Docker image of the [Sonatype Nexus Repository Manager 3][].

1. Assuming you have Docker running on your server, you can quickly set up a Nexus repository like this:

   ```shell
   docker pull sonatype/nexus3
   docker run -d -p 8081:8081 --name nexus sonatype/nexus3
   ```

   > Check out the [readme of the Sonatype Nexus 3 Manager][] for additional setup instructions.

2. To learn about how to set up the proxy for the PSPDFKit repository, check out the [official Sonatype Nexus documentation][]. We also highly recommend [grouping your repositories][] so that users can access your library and PSPDFKit via a single repository URL.

### Structure of the PSPDFKit Maven Repository

The PSPDFKit Maven repository follows the standard [Apache Maven repository layout][] and is compatible with Gradle and Android Studio dependency resolution and other Maven servers (when proxying).

The PSPDFKit Maven repository provides artifacts for the PSPDFKit framework. All of them are located relative to the PSPDFKit Maven endpoint, `https://customers.pspdfkit.com/maven/`.

#### PSPDFKit

PSPDFKit for Android and PSPDFKit Instant for Android are both bundled into a single Maven module, which is provided using the following artifacts:

- Maven metadata: [`/com/pspdfkit/pspdfkit/maven-metadata.xml`][]
- AAR file: [`/com/pspdfkit/pspdfkit/<%= latest_version(:android) %>/pspdfkit-<%= latest_version(:android) %>.aar`](https://customers.pspdfkit.com/maven/com/pspdfkit/pspdfkit/<%= latest_version(:android) %>/pspdfkit-<%= latest_version(:android) %>.aar)
- Javadoc: [`/com/pspdfkit/pspdfkit/<%= latest_version(:android) %>/pspdfkit-<%= latest_version(:android) %>-javadoc.jar`](https://customers.pspdfkit.com/maven/com/pspdfkit/pspdfkit/<%= latest_version(:android) %>/pspdfkit-<%= latest_version(:android) %>-javadoc.jar)

> **ðŸ’¡ Tip:** If you are proxying the Maven repository, you usually only need the Maven endpoint URL, `https://customers.pspdfkit.com/maven/`, since the repository adheres to the standard Maven URL format.

[transitive dependency]: https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Transitive_Dependencies
[gradle maven publisher]: https://docs.gradle.org/current/userguide/publishing_maven.html
[sonatype nexus repository manager 3]: https://help.sonatype.com/repomanager3
[readme of the sonatype nexus 3 manager]: https://store.docker.com/community/images/sonatype/nexus3
[official sonatype nexus documentation]: https://help.sonatype.com/repomanager3/maven-repositories#MavenRepositories-ProxyingMavenRepositories
[grouping your repositories]: https://help.sonatype.com/repomanager3/maven-repositories#MavenRepositories-GroupingMavenRepositories
[apache maven repository layout]: https://cwiki.apache.org/confluence/display/MAVENOLD/Repository+Layout+-+Final
[`/com/pspdfkit/pspdfkit/maven-metadata.xml`]: https://customers.pspdfkit.com/maven/com/pspdfkit/pspdfkit/maven-metadata.xml
[`/com/pspdfkit/pspdfkit-instant/maven-metadata.xml`]: https://customers.pspdfkit.com/maven/com/pspdfkit/pspdfkit-instant/maven-metadata.xml
