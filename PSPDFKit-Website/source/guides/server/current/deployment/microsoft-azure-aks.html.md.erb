---
title: Microsoft Azure Container Service
section: developers
---

This guide article will walk you through the steps for deploying PSPDFKit Server to the [Microsoft Azure Container Service][aks] with [Kubernetes][].

## Setting Up Azure CLI

To be able to deploy PSPDFKit Server to the [Microsoft Azure Container Service][aks] with [Kubernetes][], you have to set up the [Azure CLI][] utility to manage your [Kubernetes][] cluster in the command line.

To install [Azure CLI][], follow the installation instructions from the [Azure CLI installation guide][].

After you’ve installed [Azure CLI][], run the following command to log in to [Microsoft Azure][]:

```bash
az login
```

This command will print the URL [https://microsoft.com/devicelogin][] and the code for signing in. Open the URL in your browser and enter the code to sign in to your [Microsoft Azure][] account.

<center>
  <img
    alt="Sign in Page"
    src="/images/guides/server/microsoft-sign-in.png"
    width="640">
</center>

## Creating a Resource Group

To create a resource group, run the following:

```bash
az group create -l eastus -n pspdfkitresourcegroup
```

In this example, we created the resource group in the `eastus` region with the name `pspdfkitresourcegroup`. An overview of available regions can be found [here][azure regions].

## Creating the Kubernetes Cluster

To be able to manage the [Kubernetes][] cluster from the command line, you have to install [`kubectl`][kubectl]:

```bash
az aks install-cli
```

To create a [Kubernetes][] cluster with the name `pspdfkitAKScluster`, run the following:

```bash
az aks create -g pspdfkitresourcegroup --name pspdfkitAKScluster --generate-ssh-keys
```

To connect [`kubectl`][kubectl] with your cluster, execute:

```bash
az aks get-credentials -g pspdfkitresourcegroup -n pspdfkitAKScluster
```

## Creating a ConfigMap

[ConfigMaps][configmap] allow you to decouple configuration artifacts from image content. To create the `pspdfkit-config` [ConfigMap][], run the following command:

```bash
kubectl create configmap pspdfkit-config
```

After the [ConfigMap][] is created, you can edit it with the following:

```bash
kubectl edit configmap pspdfkit-config
```

This should open the created [ConfigMap][] in your editor. Edit the file to match the following file and replace `activation_key` with your activation key:

```yml
# Please edit the object below. Lines beginning with a '#' will be ignored,
# and an empty file will abort the edit. If an error occurs while saving,
# this file will be reopened with the relevant failures.
#
apiVersion: v1
data:
  activation_key: YOUR_ACTIVATION_KEY_GOES_HERE
  api_auth_token: secret
  dashboard_password: secret
  dashboard_username: dashboard
  jwt_algorithm: RS256
  jwt_public_key: |
    -----BEGIN PUBLIC KEY-----
    MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALd41vG5rMzG26hhVxE65kzWC+bYQ94t
    OxsSxIQZMOc1GY8ubuqu2iku5/5isaFfG44e+VAe+YIdVeQY7cUkaaUCAwEAAQ==
    -----END PUBLIC KEY-----
  pgdata: /var/lib/postgresql/data/pgdata
  pgdatabase: pspdfkit
  pghost: pspdfkitdb
  pgpassword: examplepassword
  pgport: "5432"
  pguser: pspdfkit
  secret_key_base: secret-key-base
kind: ConfigMap
```

Don’t change anything that comes after the `kind: ConfigMap` line, because that part is autogenerated.

## Creating an Azure Disk Volume

To create the [Azure Disk Volume][] where the database saves the data, run:

```bash
az group list --output table
```

This will print a list of resource groups. Copy the name of the resource group that starts with `MC` — for example, `MC_pspdfkitresourcegroup_pspdfkitAKScluster_eastus` — and insert it into the following command after `--resource-group`:

```bash
az disk create \
  --resource-group MC_pspdfkitresourcegroup_pspdfkitAKScluster_eastus \
  --name postgres-disk\
  --size-gb 50 \
  --query id --output tsv
```

This will print the disk ID of the created disk. For example:

```
/subscriptions/12345abc-def1-2345-6789-abcdef123456/resourceGroups/MC_pspdfkitresourcegroup_pspdfkitAKScluster_eastus/providers/Microsoft.Compute/disks/postgres-disk
```

## Creating Services and Deployments

[Kubernetes Services][kubernetes service] and [Deployments][kubernetes deployment] can be configured in a file. To run PSPDFKit Server, you have to define a Service and a Deployment for the database and a Service and a Deployment for PSPDFKit Server. First, create the file that configures the database Service and Deployment. To do this, create the `pspdfkitdb.yml` file in the current directory:

```pspdfkitdb.yml
apiVersion: v1
kind: Service
metadata:
  name: pspdfkitdb
spec:
  ports:
    - port: 5432
  selector:
    app: pspdfkitdb
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: pspdfkitdb
spec:
  template:
    metadata:
      labels:
        app: pspdfkitdb
    spec:
      containers:
        - image: "postgres:9.6.6"
          name: pspdfkitdb
          env:
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: pspdfkit-config
                  key: pguser
            - name: POSTGRES_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: pspdfkit-config
                  key: pgpassword
            - name: PGDATA
              valueFrom:
                configMapKeyRef:
                  name: pspdfkit-config
                  key: pgdata
          ports:
            - containerPort: 5432
              name: pspdfkitdb
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-storage
          azureDisk:
            kind: Managed
            diskName: postgres-disk
            diskURI: /subscriptions/12345abc-def1-2345-6789-abcdef123456/resourceGroups/MC_pspdfkitresourcegroup_pspdfkitAKScluster_eastus/providers/Microsoft.Compute/disks/postgres-disk
```

Make sure to replace `diskURI` in the last line with the disk ID you got from the command before.

After you’ve created the configuration file for the database, create the configuration for PSPDFKit Server (`pspdfkit.yml`) and replace the version in the image `pspdfkit/pspdfkit:2019.4.1` with the latest PSPDFKit Server version:

```pspdfkit.yml
apiVersion: v1
kind: Service
metadata:
  name: pspdfkit
spec:
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
  selector:
    app: pspdfkit
  type: LoadBalancer
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: pspdfkit
spec:
  template:
    metadata:
      labels:
        app: pspdfkit
    spec:
      containers:
        - image: "pspdfkit/pspdfkit:2019.4.1"
          name: pspdfkit
          env:
            - name: PGUSER
              valueFrom:
                configMapKeyRef:
                  name: pspdfkit-config
                  key: pguser
            - name: PGPASSWORD
              valueFrom:
                configMapKeyRef:
                  name: pspdfkit-config
                  key: pgpassword
            - name: PGDATABASE
              valueFrom:
                configMapKeyRef:
                  name: pspdfkit-config
                  key: pgdatabase
            - name: PGHOST
              valueFrom:
                configMapKeyRef:
                  name: pspdfkit-config
                  key: pghost
            - name: PGPORT
              valueFrom:
                configMapKeyRef:
                  name: pspdfkit-config
                  key: pgport
            - name: ACTIVATION_KEY
              valueFrom:
                configMapKeyRef:
                  name: pspdfkit-config
                  key: activation_key
            - name: API_AUTH_TOKEN
              valueFrom:
                configMapKeyRef:
                  name: pspdfkit-config
                  key: api_auth_token
            - name: SECRET_KEY_BASE
              valueFrom:
                configMapKeyRef:
                  name: pspdfkit-config
                  key: secret_key_base
            - name: JWT_ALGORITHM
              valueFrom:
                configMapKeyRef:
                  name: pspdfkit-config
                  key: jwt_algorithm
            - name: JWT_PUBLIC_KEY
              valueFrom:
                configMapKeyRef:
                  name: pspdfkit-config
                  key: jwt_public_key
            - name: DASHBOARD_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: pspdfkit-config
                  key: dashboard_username
            - name: DASHBOARD_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: pspdfkit-config
                  key: dashboard_password
          ports:
            - containerPort: 5000
              name: pspdfkit
```

To create all Services and Deployments needed to run PSPDFKit Server, execute:

```bash
kubectl create -f ./pspdfkitdb.yml
```

```bash
kubectl create -f ./pspdfkit.yml
```

## View the Dashboard

To be able to access the server, you have to get the external IP address that was assigned to the server. Run the following command to view all the Services in your cluster, along with their assigned external IP addresses:

```bash
kubectl get services
```

This will show something like the following:

```bash
NAME         TYPE           CLUSTER-IP      EXTERNAL-IP      PORT(S)          AGE
kubernetes   ClusterIP      10.15.240.1     <none>           443/TCP          54m
pspdfkit     LoadBalancer   10.15.247.197   12.345.678.910   5000:32393/TCP   1m
pspdfkitdb   ClusterIP      10.15.244.127   <none>           5432/TCP         4m
```

Copy the `EXTERNAL-IP` address from the `pspdfkit` column and access the [dashboard][] with the port `5000` and the `/dashboard` path in your web browser. In this example, you would access the dashboard with `http://12.345.678.910:5000/dashboard`.

## Limitations

Be aware that this is just an example setup, and we recommend looking deeper into the [Microsoft Azure Container Service][aks] for a production-ready setup.

[kubernetes]: https://kubernetes.io/
[aks]: https://azure.microsoft.com/en-us/services/container-service/
[azure cli installation guide]: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest
[azure cli]: https://docs.microsoft.com/en-us/cli/azure/?view=azure-cli-latest
[microsoft azure]: https://azure.microsoft.com/en-gb/
[https://microsoft.com/devicelogin]: https://microsoft.com/devicelogin
[azure regions]: https://azure.microsoft.com/en-us/global-infrastructure/regions/
[azure container registry]: https://azure.microsoft.com/en-us/services/container-registry/
[kubectl]: https://kubernetes.io/docs/reference/kubectl/overview/
[kubernetes secrets]: https://kubernetes.io/docs/concepts/configuration/secret/
[azure disk volume]: https://docs.microsoft.com/en-us/azure/aks/azure-disk-volume
[configmap]: https://cloud.google.com/kubernetes-engine/docs/concepts/configmap
[kubernetes deployment]: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
[kubernetes service]: https://kubernetes.io/docs/concepts/services-networking/service/
[dashboard]: ../../pspdfkit-server/dashboard/
[docker for mac]: https://docs.docker.com/docker-for-mac/
[docker for windows]: https://docs.docker.com/docker-for-windows/
[docker]: https://www.docker.com/
[install docker]: https://www.docker.com/community-edition#/download
