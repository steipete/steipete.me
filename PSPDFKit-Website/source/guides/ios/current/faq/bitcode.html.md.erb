---
title: Bitcode
section: developers
---

Bitcode is an intermediate representation of a compiled binary. Including bitcode will allow Apple to reoptimize your app binary in the future without the need for you to submit a new version of your app to the store. PSPDFKit for iOS has been built with bitcode since version 5. Bitcode is also one of the largest factors in the [size of our SDK][pspdfkit guide framework size].

[Bitcode][llvm bitcode article] is just another form of [LLVM IR][llvm language reference], which is architecture dependent. PSPDFKit ships with bitcode slices for arm64.

Bitcode is relevant for crash symbolication as well — be sure to read our articles about [crash report symbolication][pspdfkit guide advanced symbolication] and [third-party services][pspdfkit guide 3rd party crash report].

## Checking for Bitcode

If you inspect the XCFramework’s contents, you’ll see several directories that contain framework builds for different architectures. The presence of a `BCSymbolMaps` directory inside the framework for a particular architecture indicates that that architecture supports bitcode. For example, the presence of `BCSymbolMaps` in `PSPDFKit.xcframework/ios-arm64/PSPDFKit.framework/BCSymbolMaps` signifies that the 64-bit ARM architecture of PSPDFKit supports bitcode.

## Stripping Bitcode

Xcode 7.2 added a new tool called [`bitcode_strip`][apple release notes] to remove bitcode chunks from binaries:

```
$ xcrun bitcode_strip -r PSPDFKit -o PSPDFKit
```

Removing bitcode will disallow Apple from running binary optimizations on your behalf. You can verify that the removal worked by checking the file size — which should be significantly smaller than the original file — or by using `otool` as shown above.

## BCSymbolMaps

A `BCSymbolMap` is a lot like a dSYM for bitcode. Xcode builds it both as part of creating the app binary and for every dynamic framework. It’s required for resymbolicating function/method names to understand crashes. Symbol maps are per architecture, so there are currently two (ARMv7 and 64-bit ARM) in PSPDFKit. You can learn more in the [Framework Size][pspdfkit guide dsym] guide.

## Learn More

- [Apple Documentation on App Thinning and Bitcode][]
- [Bitcode Demystified][]

[pspdfkit guide framework size]: ../../faq/framework-size
[llvm bitcode article]: http://llvm.org/docs/BitCodeFormat.html
[llvm language reference]: http://llvm.org/docs/LangRef.html
[pspdfkit guide advanced symbolication]: ../../troubleshooting/advanced-symbolication
[pspdfkit guide 3rd party crash report]: ../../troubleshooting/bug-reporting/#3rd-party-crash-reporting-services
[pspdfkit guide dsym]: ../../faq/framework-size/#dsym-and-bcsymbolmaps
[apple release notes]: https://developer.apple.com/library/content/documentation/Xcode/Conceptual/RN-Xcode-Archive/Chapters/xc7_release_notes.html
[apple documentation on app thinning and bitcode]: https://developer.apple.com/library/tvos/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html
[bitcode demystified]: http://lowlevelbits.org/bitcode-demystified/
