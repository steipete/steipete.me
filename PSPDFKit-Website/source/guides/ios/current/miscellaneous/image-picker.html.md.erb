---
title: Image Picker
section: developers
---

PSPDFKit uses [`PSPDFImagePickerController`][], which is a subclass of [`UIImage​Picker​Controller`][], to choose an image from your device to use. The image can either be selected from your photo library or taken using the camera. [`PSPDFImagePickerController`][] is currently used when adding an image annotation to a document by tapping the image annotation button in the annotation toolbar, and when adding a new page in the Document Editor by selecting the image option for the page background.

**ℹ️ Note:** Make sure you have configured [Image Permissions][] in your app.

## Image Editor

The image picker also includes an image editor, which is automatically shown after an image has been selected. The image editor lets you zoom, crop, and rotate an image, allowing you to only use a specific part of an image. Showing the image editor can be restricted to use the selected image as is. You can disable the image editor by disabling [`shouldShowImageEditor`][].

![Image Editor](/images/guides/ios/miscellaneous/image-picker/image-editor.gif)

## Image Quality

When adding an image annotation and selecting an image, you will be presented with options to select the image size. This can be customized by subclassing [`PSPDFImagePickerController`][] and setting [`allowedImageQualities`][] in its initializer, like so:

[==

```swift
class CustomImagePickerController: PSPDFImagePickerController {
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)

        // Setting `allowedImageQualities` to `PSPDFImageQualityAll` to enable the quality sheet.
        allowedImageQualities = .all
    }
}
```

```objc
@interface CustomImagePickerController : PSPDFImagePickerController @end

@implementation CustomImagePickerController

- (instancetype)initWithNibName:(nullable NSString *)nibNameOrNil bundle:(nullable NSBundle *)nibBundleOrNil {
    if ((self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil])) {

        // Setting `allowedImageQualities` to `PSPDFImageQualityAll` to enable the quality sheet.
        self.allowedImageQualities = PSPDFImageQualityAll;
    }
    return self;
}

@end
```

==]

## Delegate

To get notified of image selections or when editing is finished, you can implement [`PSPDFImagePickerControllerDelegate`][] and set [`imageDelegate`][]. Implementing the delegate can be done by using a subclass of [`PSPDFImagePickerController`][], so that this is used for all presentations of [`PSPDFImagePickerController`][] without having to set [`imageDelegate`][] again:

[==

```swift
class ImagePickerController: PSPDFImagePickerController, PSPDFImagePickerControllerDelegate {
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        imageDelegate = self
    }

    func imagePickerController(_ picker: PSPDFImagePickerController, didFinishWith image: UIImage, andInfo info: [String: Any]) {
        // Do something.
    }
}
```

```objc
@interface PSCImagePickerController : PSPDFImagePickerController <PSPDFImagePickerControllerDelegate> @end

@implementation PSCImagePickerController

- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {
    if ((self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil])) {
        self.imageDelegate = self;
    }
    return self;
}

- (void)imagePickerController:(PSPDFImagePickerController *)picker didFinishWithImage:(UIImage *)image andInfo:(NSDictionary<NSString *, id> *)info {
    // Do something.
}

@end
```

==]

And don’t forget to override the class with your own subclass:

[==

```swift
let configuration = PSPDFConfiguration { builder in
    builder.overrideClass(PSPDFImagePickerController.self, with: ImagePickerController.self)
}
```

```objc
PSPDFConfiguration *configuration = [PSPDFConfiguration configurationWithBuilder: ^(PSPDFConfigurationBuilder *builder) {
    [builder overrideClass:PSPDFImagePickerController.class withClass:PSCImagePickerController.class];
}];
```

==]

## Source Type

You can specify the source type for a subclass of `PSPDFImagePickerController` by overriding [`availableImagePickerSourceTypes`][] as follows:

[==

```swift
class CustomImagePickerController: PSPDFImagePickerController {
    override class func availableImagePickerSourceTypes() -> [NSNumber] {
        // Only use images from the camera. Disables the use of the Photo Library.
        return [NSNumber(value: UIImagePickerController.SourceType.camera.rawValue)]
    }
}
```

```objc
@interface CustomImagePickerController : PSPDFImagePickerController @end

@implementation CustomImagePickerController

+ (NSArray<NSNumber *> *)availableImagePickerSourceTypes {
    // Only use images from the camera. Disables the use of the Photo Library.
    return @[@(UIImagePickerControllerSourceTypeCamera)];
}

@end
```

==]

**ℹ️ Note:** Make sure you have configured [Image Permissions][] in your app. Otherwise, related image picker source types will be ignored.

[`pspdfimagepickercontroller`]: https://pspdfkit.com/api/ios/Classes/PSPDFImagePickerController.html
[`uiimage​picker​controller`]: https://developer.apple.com/reference/uikit/uiimagepickercontroller
[`shouldshowimageeditor`]: https://pspdfkit.com/api/ios/Classes/PSPDFImagePickerController.html#/c:objc(cs)PSPDFImagePickerController(py)shouldShowImageEditor
[`allowedimagequalities`]: https://pspdfkit.com/api/ios/Classes/PSPDFImagePickerController.html#/c:objc(cs)PSPDFImagePickerController(py)allowedImageQualities
[`pspdfimagepickercontrollerdelegate`]: https://pspdfkit.com/api/ios/Protocols/PSPDFImagePickerControllerDelegate.html
[`imagedelegate`]: https://pspdfkit.com/api/ios/Classes/PSPDFImagePickerController.html#/c:objc(cs)PSPDFImagePickerController(py)imageDelegate
[image permissions]: ../../getting-started/permissions/#image-permissions
[`availableimagepickersourcetypes`]: https://pspdfkit.com/api/ios/Classes/PSPDFImagePickerController.html#/c:objc(cs)PSPDFImagePickerController(py)availableImagePickerSourceTypes
