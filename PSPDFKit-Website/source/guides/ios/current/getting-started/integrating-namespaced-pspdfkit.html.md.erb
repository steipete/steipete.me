---
title: Integrating Namespaced PSPDFKit
section: developers

secret: true
---

To integrate PSPDFKit in your dynamic framework, you need to include a custom build of the static framework in your project. (You’ll get this build from us — this is not available via the customer portal.)

To do this, drag both the `PSPDFKit` and `PSPDFKitUI` folders into your Xcode project and enable `PSPDFKit.xcconfig` as seen in the screenshot.

If you have custom values set in your project settings as “Other Linker Flags,” you need to clear them or merge the entries with the contents of `PSPDFKit.xcconfig.`

The ACMECorpSDK example project demonstrates how to set this up correctly.

<img src="/images/guides/ios/getting-started/integrating-namespaced-pspdfkit/static-framework.png">


## Compiling

If you embed the static build of PSPDFKit in your project, you can build your dynamic SDK, which will then also automatically include PSPDFKit, but without any symbols exposed. Ensure that you compile with `-fvisibility=hidden` set on “Other C/C++ Flags” in order to add some protection to the internal PSPDFKit functions and your own SDK.

Furthermore, use these settings for your Release configuration to ensure symbols are properly stripped:


```
// Performance
GCC_UNROLL_LOOPS = YES
GCC_OPTIMIZATION_LEVEL = s

// Without this set to YES, Xcode only passes -fembed-bitcode-marker, and not -fembed-bitcode, to the compiler, when ENABLE_BITCODE is YES
DEPLOYMENT_POSTPROCESSING = YES

// Enable bitcode is YES by default on iOS. Mac doesn’t support it, so setting that flag would break Mac.
ENABLE_BITCODE[sdk=iphoneos*] = YES

// Link-Time optimization reduces file size by quite a bit.
LLVM_LTO = YES

// Code protection
STRIP_INSTALLED_PRODUCT = YES
SEPARATE_STRIP = YES
COPY_PHASE_STRIP = YES
DEAD_CODE_STRIPPING = YES
STRIP_STYLE = non-global

// Build all the architectures
ONLY_ACTIVE_ARCH = NO
ENABLE_TESTABILITY = NO
VALIDATE_PRODUCT = YES

// Swift
SWIFT_ACTIVE_COMPILATION_CONDITIONS = RELEASE
SWIFT_OPTIMIZATION_LEVEL = -Owholemodule

// Visibility controls
OTHER_CFLAGS = $(inherited) -fvisibility=hidden
```

We recommend using an `.xcconfig` file to make it easy to adjust these settings.

## Namespacing

Objective-C doesn’t support namespacing by default, so we added support for this by prefixing all the classes, functions, categories, externals, and notifications with a unique prefix. This will allow your SDK users to ship their own version of PSPDFKit independent of the build you used.

We also make sure there are no clashes in folder names, global threads, notifications, and other things that might interfere with each other.

Additionally, we provide an optional namespace type alias Swift file so that you can use all the default class names instead of the namespaced classes from Swift.


## How to Get Updates

 As this version of PSPDFKit requires a custom build, please submit a [support request](https://pspdfkit.com/support/request) for an update.


## Analytics

PSPDFKit collects [anonymous analytics events](../../features/analytics/) for usage and pings our server every time PSPDFKit is activated, once per application run. The ping will only be created when the application fully restarts — iOS often keeps apps in the background, in which case no new ping will be created.

The following data is collected during a ping:

*  The [`identifierForVendor`](https://developer.apple.com/reference/uikit/uidevice/1620059-identifierforvendor), [app bundle ID](../../faq/what-is-a-bundle-id/), app name, version, and minimum required OS version.
*  The OS version, uptime, device name, model, and language.

The ping securely sends the above-mentioned data with the currently used PSPDFKit version and build number/compile date to our server. This statistical data is transferred via HTTPS and encrypted via a custom private key; only PSPDFKit can use it.


## FAQ

### Why is the static PSPDFKit binary so large?

While the static framework might be huge, this is mostly due to duplicate translation units, and this will slim down to around ~20 MB per architecture when you’re building your dynamic framework. There are currently a few bugs in Xcode that block us from moving to a different internal project structure that would emit a smaller file, but since the end result is the same, it’s nothing more than a slight annoyance.

### What about a static framework?

We only support building real dynamic frameworks — not static libraries and not static `embeddedframework` structures. A dynamic framework is the only way to guarantee namespace isolation required for multiple SDKs to work in parallel.
