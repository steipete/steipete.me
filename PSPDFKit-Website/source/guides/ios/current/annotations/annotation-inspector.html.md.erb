---
title: Annotation Inspector
section: developers
---

The annotation inspector ([`PSPDFAnnotationStyleViewController`][]) is a PSPDFKit UI component that allows you to change the different properties of an annotation. You can use it to customize selected annotations by changing their various appearance properties.

You can also customize the annotation inspector by providing a limited set of annotation properties to users for customization.

<img width="50%" src="/images/guides/ios/annotations/annotation-inspector/customized-annotation-inspector.png">

The set of customizable properties can be found in `PSPDFAnnotationStyleKey.h`.

## Customize Annotation Inspector Properties

To change the properties available in the style inspector, simply set the [`propertiesForAnnotations`][] property of the [`PSPDFConfigurationBuilder`][] as follows:

[==

```swift
let configuration = PSPDFConfiguration { builder in
  var annotationProperties = builder.propertiesForAnnotations

  annotationProperties[.ink] = [[AnnotationStyleKey.lineWidth, AnnotationStyleKey.color]]
  annotationProperties[.underline] = [[AnnotationStyleKey.alpha]]
  annotationProperties[.line] = [[AnnotationStyleKey.color, AnnotationStyleKey.lineEnd1, AnnotationStyleKey.lineEnd2]]
  annotationProperties[.square] = [[AnnotationStyleKey.color, AnnotationStyleKey.fillColor]]

  builder.propertiesForAnnotations = annotationProperties
}
```

```objc
PSPDFConfiguration *configuration = [PSPDFConfiguration configurationWithBuilder: ^(PSPDFConfigurationBuilder *builder) {
  NSMutableDictionary *annotationProperties = [builder.propertiesForAnnotations mutableCopy];

  annotationProperties[PSPDFAnnotationStringInk] = @[@[PSPDFAnnotationStyleKeyLineWidth, PSPDFAnnotationStyleKeyColor]];
  annotationProperties[PSPDFAnnotationStringUnderline] = @[@[PSPDFAnnotationStyleKeyAlpha]];
  annotationProperties[PSPDFAnnotationStringLine] = @[@[PSPDFAnnotationStyleKeyColor, PSPDFAnnotationStyleKeyLineEnd1, PSPDFAnnotationStyleKeyLineEnd2]];
  annotationProperties[PSPDFAnnotationStringSquare] = @[@[PSPDFAnnotationStyleKeyColor, PSPDFAnnotationStyleKeyFillColor]];

  builder.propertiesForAnnotations = annotationProperties;
}];
```

==]

This can also be achieved by subclassing [`PSPDFAnnotationStyleViewController`][] and overriding the [`propertiesForAnnotations:`][] method to provide the properties for the different annotation types:

[==

```swift
override func properties(for annotations: [PSPDFAnnotation]) -> [[AnnotationStyleKey]] {
    let defaultSections = super.properties(for: annotations)
    // Allow only a smaller list of known properties in the inspector popover.
    let supportedKeys: Set<AnnotationStyleKey> = [.color, .alpha, .lineWidth, .fontSize]
    return defaultSections.map { propertiesInSection in
        return propertiesInSection.filter { property in
            return supportedKeys.contains(property)
        }
    }
}
```

```objc
- (NSArray<NSArray<PSPDFAnnotationStyleKey> *> *)propertiesForAnnotations:(NSArray<PSPDFAnnotation *> *)annotations {
    NSArray<NSArray<PSPDFAnnotationStyleKey> *> *defaultSections = [super propertiesForAnnotations:annotations];

    // Allow only a smaller list of known properties in the inspector popover.
    NSSet<PSPDFAnnotationStyleKey> *supportedKeys = [NSSet setWithObjects: PSPDFAnnotationStyleKeyColor, PSPDFAnnotationStyleKeyAlpha, PSPDFAnnotationStyleKeyLineWidth, PSPDFAnnotationStyleKeyFontSize, nil];

    NSMutableArray<NSArray<PSPDFAnnotationString> *> *newSections = [NSMutableArray array];
    for (NSArray *properties in defaultSections) {
        [newSections addObject:[properties filteredArrayUsingPredicate:[NSPredicate predicateWithBlock:^BOOL(NSString *property, NSDictionary *bindings2) {
            return [supportedKeys containsObject:property];
        }]]];
    }
    return newSections;
}
```

==]

Take a look at `PSCSimpleAnnotationInspectorExample.m` in [PSPDFCatalog][] for a complete example.

[`propertiesForAnnotations`][] also accepts a block that takes a `PSPDFAnnotation` and returns an array of `PSPDFAnnotationStyleKey`s. This is useful when you want to customize the properties for a given annotation variant:

[==

```swift
// We need to explicitly use `@convention(block)`, as the `Array` is `id` typed.
typealias AnnotationStyleBlock = @convention(block) (PSPDFAnnotation) -> [[AnnotationStyleKey]]
let styleBlock: AnnotationStyleBlock = { annotation in
    return [[AnnotationStyleKey.color, AnnotationStyleKey.fillColor]]
}
// Casting the Swift closure to `AnyObject`, since closures in Swift are not directly converted to Objective-C closures.
let blockObject = unsafeBitCast(styleBlock, to: AnyObject.self)
annotationProperties[.ink] = blockObject

```

```objc
PSPDFAnnotationStyleBlock styleBlock = ^PSPDFAnnotationStyleKeyGroupedList (PSPDFAnnotation *annotation) {
    return @[@[PSPDFAnnotationStyleKeyColor, PSPDFAnnotationStyleKeyFillColor]];
};
annotationProperties[PSPDFAnnotationStringSquare] = styleBlock;
```

==]

To customize the color presets in the style inspector, check out our [Customizing Color Presets][] guide.

[`pspdfannotationstyleviewcontroller`]: https://pspdfkit.com/api/ios/Classes/PSPDFAnnotationStyleViewController.html
[`propertiesforannotations`]: https://pspdfkit.com/api/ios/Classes/PSPDFConfiguration.html#/c:objc(cs)PSPDFConfiguration(py)propertiesForAnnotations
[`pspdfconfigurationbuilder`]: https://pspdfkit.com/api/ios/Classes/PSPDFConfigurationBuilder.html
[`propertiesforannotations:`]: https://pspdfkit.com/api/ios/Classes/PSPDFAnnotationStyleViewController.html#/c:objc(cs)PSPDFAnnotationStyleViewController(im)propertiesForAnnotations:
[pspdfcatalog]: ../../getting-started/example-projects/#pspdfcatalog
[customizing color presets]: ../../annotations/customizing-presets/
