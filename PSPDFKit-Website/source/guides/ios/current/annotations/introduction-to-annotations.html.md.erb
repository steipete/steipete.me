---
title: Introduction to Annotations
section: developers

order: 1
---

![Annotations](/images/guides/shared/annotations/annotations-header.png)

PSPDFKit supports all common annotation types:

- [Link][]
- [Highlight][], [Underline][], [Strikeout][], [Squiggly][]
- [Free Text][]
- [Ink][]
- [Square][], [Circle][], [Line][], [Polyline][], [Polygon][]
- [Note][]
- [Sound][]
- [File][]
- [Widget][]
- [Image/Stamp][]
- [Rich Media/Video][], [Screen][]
- [Caret][]
- [Redaction][]

These are standard annotations (as defined in the PDF Reference) that can be read and written by many apps, like Adobe Acrobat or even Apple’s `Preview.app`. Most of these annotation types can also be written back, with the exception of rich media/video, file, and widget. (See also: [What Are Annotations?][annotation blog post])

## Working with Annotations in Code

You can work with all supported annotations not only in our UI but also in code. We have APIs for various operations, including getting, setting, modifying, and removing annotations.

To get all annotations on a certain document page, you can call [`annotationsForPageAtIndex:type`][]:

[==

```swift
// Get all annotations on the first page.
let annotations = document.annotationsForPage(at: 0, type: .all)
```

```objc
// Get all annotations on the first page.
NSArray<__kindof PSPDFAnnotation *> *annotations = [document annotationsForPageAtIndex:0 type:PSPDFAnnotationTypeAll]
```

==]

### Creating Annotations

You can instantiate annotations with their corresponding classes, which are all subclasses of the base [`PSPDFAnnotation`][] class:

[==

```swift
// Create a free text annotation.
let freeTextAnnotation = PSPDFFreeTextAnnotation()
freeTextAnnotation.contents = "This is a free text annotation."
freeTextAnnotation.fontSize = 20
freeTextAnnotation.boundingBox = CGRect(x: 200, y: 200, width: 200, height: 200)
freeTextAnnotation.pageIndex = 0
```

```objc
// Create a free text annotation.
PSPDFFreeTextAnnotation *freeTextAnnotation = [[PSPDFFreeTextAnnotation alloc] init];
freeTextAnnotation.contents = @"This is a free text annotation.";
freeTextAnnotation.fontSize = 20.f;
freeTextAnnotation.boundingBox = CGRectMake(200.f, 200.f, 200.f, 200.f);
freeTextAnnotation.pageIndex = 0;
```

==]

For a more detailed guide, please refer to [Programmatically Creating Annotations][pspdfkit guide programmatically creating annotations].

### Adding and Removing Annotations

To add annotations on a document page, you can use [`addAnnotations:options:`][] on [`PSPDFDocument`][]. To remove annotations on the document, you can use [`removeAnnotations:options:`][]:

[==

```swift
// Add an annotation to a document.
document.add([freeTextAnnotation])

// Remove an annotation from a document.
document.remove([freeTextAnnotation])
```

```objc
// Add an annotation to a document.
[document addAnnotations:@[freeTextAnnotation] options:nil];

// Remove an annotation from a document.
[document removeAnnotations:@[freeTextAnnotation] options:nil];
```

==]

You can also remove all annotations from a document using [`allAnnotationsOfType:`][] and [`removeAnnotations:options:`][]. You usually don’t want to remove links and form elements, which are also annotations. These annotation types can be excluded, as seen in the code snippet below:

[==

```swift
var annotationTypes = PSPDFAnnotationType.all
annotationTypes.remove([.link, .widget])
let allAnnotationsDictionary = document.allAnnotations(of: annotationTypes)
let allAnnotations = allAnnotationsDictionary.flatMap { key, value in
    return value
}
document.remove(allAnnotations)
```

```objc
NSDictionary *allAnnotationsDictionary = [document allAnnotationsOfType:PSPDFAnnotationTypeAll & ~(PSPDFAnnotationTypeLink|PSPDFAnnotationTypeWidget)];

NSMutableArray *allAnnotations = [NSMutableArray array];
[allAnnotationsDictionary enumerateKeysAndObjectsUsingBlock: ^(NSNumber *key, NSArray *value, BOOL *stop) {
    [allAnnotations addObjectsFromArray:value];
}];
[document removeAnnotations:allAnnotations options:nil];
```

==]

### Saving Annotations with PSPDFKit

<div class="alert alert-warning">
<p><b>ℹ️ Note:</b> Annotations can only be written back into a PDF if the file is writeable. The default location (App Bundle) is read-only. Copy the PDF into your Documents folder (see the Test PDF Annotation Writing example in PSPDFCatalog).</p>
</div>

Optionally, and as a fallback, annotations can also be written as external files. This is the default behavior if a PDF is read-only and can be customized by changing [`annotationSaveMode`][]. The valid options are: `PSPDFAnnotationSaveModeDisabled`, `PSPDFAnnotationSaveModeExternalFile`, `PSPDFAnnotationSaveModeEmbedded`, and `PSPDFAnnotationSaveModeEmbeddedWithExternalFileAsFallback` (default).

For more information, please see the [Annotation-Saving Mechanism][pspdfkit guide how are annotations saved] guide.

### Handling Annotations with PSPDFKit

Annotations are handled by the [`PSPDFAnnotationManager`][] class, an instance of which is managed by a [`PSPDFDocumentProvider`][]. A [`PSPDFDocument`][] has one or more [`PSPDFDocumentProvider`][]s, depending on the amount of PDF files it contains (usually just one). The preferred way to customize annotation handling is to implement a custom [`PSPDFAnnotationProvider`][] subclass. We provide a [`PSPDFContainerAnnotationProvider`][] subclass that is a good base to build upon. If you want to change [`PSPDFAnnotationManager`][] across the application, the best way to do this is to use [`overrideClass:withClass:`][] on [`PSPDFDocument`][].

Make sure to add the [`annotationButtonItem`][] to the [`toolbar`][] to be able to show the annotation toolbar. With [`PSPDFConfiguration`][]’s [`editableAnnotationTypes`][] property, you can customize which annotations can be edited. Set this to an empty array to disable annotation editing.

### Checking If a Document Contains Annotations

When calling [`allAnnotationsOfType:`][], PSPDFKit will return all annotations of the specified type(s). To check if a document contains annotations, you will likely want to use `PSPDFAnnotationTypeAll & ~(PSPDFAnnotationTypeLink|PSPDFAnnotationTypeWidget)`, like so:

[==

```swift
var annotationTypes = PSPDFAnnotationType.all
annotationTypes.remove([.link, .widget])
let allAnnotationsDictionary = document.allAnnotations(of: annotationTypes)
```

```objc
NSDictionary *allAnnotationsDictionary = [document allAnnotationsOfType:PSPDFAnnotationTypeAll & ~(PSPDFAnnotationTypeLink|PSPDFAnnotationTypeWidget)];
```

==]

This returns all annotations, excluding link and widget annotations. Widget annotations include simple buttons and all form element types. [`allAnnotationsOfType:`][] returns a dictionary where the key is the page number and the value is an array containing all annotations on that page, so you need to check if any of those arrays have any annotations.

PSPDFCatalog contains many examples of working with annotations, so be sure to check them out.

### Uniquely Identifying Annotations

While the `name` property of an annotation is defined in the PDF spec as optional, PSPDFKit automatically sets `name` to a unique identifier (UUID) each time an annotation is created.

### Storing Custom Data in Annotations

You can persistently store custom data on a per-annotation basis using [`PSPDFAnnotation`][]’s [`customData`][] property. More information about [`customData`][] is available [in the corresponding guide][pspdfkit guide pspdfannotation custom data].

[`annotationsforpageatindex:type`]: https://pspdfkit.com/api/ios/Classes/PSPDFDocument.html#/c:objc(cs)PSPDFDocument(im)annotationsForPageAtIndex:type:
[`addannotations:options:`]: https://pspdfkit.com/api/ios/Classes/PSPDFDocument.html#/c:objc(cs)PSPDFDocument(im)addAnnotations:options:
[`removeannotations:options:`]: https://pspdfkit.com/api/ios/Classes/PSPDFDocument.html#/c:objc(cs)PSPDFDocument(im)removeAnnotations:options:
[`allannotationsoftype:`]: https://pspdfkit.com/api/ios/Classes/PSPDFDocument.html#/c:objc(cs)PSPDFDocument(im)allAnnotationsOfType:
[link]: https://pspdfkit.com/api/Classes/PSPDFLinkAnnotation.html
[highlight]: https://pspdfkit.com/api/Classes/PSPDFHighlightAnnotation.html
[underline]: https://pspdfkit.com/api/Classes/PSPDFUnderlineAnnotation.html
[strikeout]: https://pspdfkit.com/api/Classes/PSPDFStrikeOutAnnotation.html
[squiggly]: https://pspdfkit.com/api/Classes/PSPDFSquigglyAnnotation.html
[free text]: https://pspdfkit.com/api/Classes/PSPDFFreeTextAnnotation.html
[ink]: https://pspdfkit.com/api/Classes/PSPDFInkAnnotation.html
[square]: https://pspdfkit.com/api/Classes/PSPDFSquareAnnotation.html
[circle]: https://pspdfkit.com/api/Classes/PSPDFCircleAnnotation.html
[line]: https://pspdfkit.com/api/Classes/PSPDFLineAnnotation.html
[polyline]: https://pspdfkit.com/api/Classes/PSPDFPolyLineAnnotation.html
[polygon]: https://pspdfkit.com/api/Classes/PSPDFPolygonAnnotation.html
[note]: https://pspdfkit.com/api/Classes/PSPDFNoteAnnotation.html
[sound]: https://pspdfkit.com/api/Classes/PSPDFSoundAnnotation.html
[file]: https://pspdfkit.com/api/Classes/PSPDFFileAnnotation.html
[widget]: https://pspdfkit.com/api/Classes/PSPDFWidgetAnnotation.html
[image/stamp]: https://pspdfkit.com/api/Classes/PSPDFStampAnnotation.html
[rich media/video]: https://pspdfkit.com/api/Classes/PSPDFRichMediaAnnotation.html
[screen]: https://pspdfkit.com/api/Classes/PSPDFScreenAnnotation.html
[caret]: https://pspdfkit.com/api/Classes/PSPDFCaretAnnotation.html
[redaction]: https://pspdfkit.com/api/Classes/PSPDFRedactionAnnotation.html
[annotation blog post]: /blog/2018/what-are-annotations/
[pspdfkit guide programmatically creating annotations]: ../../annotations/programmatically-creating-annotations
[`annotationsavemode`]: https://pspdfkit.com/api/ios/Classes/PSPDFDocument.html#/c:objc(cs)PSPDFDocument(py)annotationSaveMode
[pspdfkit guide how are annotations saved]: ../../annotations/annotation-saving-mechanism
[`pspdfannotationmanager`]: https://pspdfkit.com/api/Classes/PSPDFAnnotationManager.html
[`pspdfannotationprovider`]: https://pspdfkit.com/api/Protocols/PSPDFAnnotationProvider.html
[`pspdfcontainerannotationprovider`]: https://pspdfkit.com/api/Classes/PSPDFContainerAnnotationProvider.html
[`overrideclass:withclass:`]: https://pspdfkit.com/api/ios/Classes/PSPDFDocument.html#/c:objc(cs)PSPDFDocument(im)overrideClass:withClass:
[`annotationbuttonitem`]: https://pspdfkit.com/api/ios/Classes/PSPDFViewController.html#/c:objc(cs)PSPDFViewController(py)annotationButtonItem
[`toolbar`]: https://pspdfkit.com/api/ios/Classes/PSPDFNavigationItem.html#/c:objc(cs)PSPDFNavigationItem(im)rightBarButtonItemsForViewMode:
[`editableannotationtypes`]: https://pspdfkit.com/api/ios/Classes/PSPDFConfiguration.html#/c:objc(cs)PSPDFConfiguration(py)editableAnnotationTypes
[`allannotationsoftype:`]: https://pspdfkit.com/api/ios/Classes/PSPDFDocument.html#/c:objc(cs)PSPDFDocument(im)allAnnotationsOfType:
[`customdata`]: https://pspdfkit.com/api/ios/Classes/PSPDFAnnotation.html#/c:objc(cs)PSPDFAnnotation(py)customData
[`pspdfannotation`]: https://pspdfkit.com/api/ios/Classes/PSPDFAnnotation.html
[pspdfkit guide pspdfannotation custom data]: ../../annotations/custom-data-in-annotations
