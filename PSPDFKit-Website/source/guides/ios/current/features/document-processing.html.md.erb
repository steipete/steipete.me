---
title: Document Processing
section: developers
---

PSPDFKit allows the splitting and merging of documents, as well as annotation flattening using the [`PSPDFProcessor`][] class.

## Extracting Pages

[`PSPDFProcessor`][] can extract pages from one document and put them into another document. You can choose to extract a single page, a range of pages, or even multiple page ranges. In most cases, you’ll want to use [`PSPDFProcessor`][] to create a new PDF document on disk based on a current [`PSPDFDocument`][]:

[==

```swift
// Create default configuration.
let configuration = PSPDFProcessorConfiguration(document: document)!
// Change all annotations to be flattened (instead of saved as annotations).
configuration.modifyAnnotations(ofTypes: .all, change: .flatten)
// Only extract pages 0, 1, and 2.
configuration.includeOnlyIndexes(IndexSet(integersIn: 0...2))

// Start the conversion from `document` to `splitURL`.
let processor = PSPDFProcessor(configuration: configuration, securityOptions: nil)
try! processor.write(toFileURL: splitURL)
```

```objc
// Create default configuration.
PSPDFProcessorConfiguration *configuration = [[PSPDFProcessorConfiguration alloc] initWithDocument:document];
// Change all annotations to be flattened (instead of saved as annotations).
[configuration modifyAnnotationsOfTypes:PSPDFAnnotationTypeAll change:PSPDFAnnotationChangeFlatten];
// Only extract pages 0, 1, and 2.
[configuration includeOnlyIndexes:[NSIndexSet indexSetWithIndexesInRange:NSMakeRange(0, 2)]];

// Start the conversion from `document` to `splitURL`.
PSPDFProcessor *processor = [[PSPDFProcessor alloc] initWithConfiguration:configuration securityOptions:nil];
[processor writeToFileURL:splitURL];
```

==]

**ℹ️ Note:** In PSPDFKit 5.2 and earlier, the above was called `generatePDFFromDocument:pageRanges:outputFileURL:options:progressBlock:error:`, and it was configured via a dictionary with predefined keys. We replaced this with [`PSPDFProcessorConfiguration`][] to have an API that is simpler and easier to understand. At the same time, we made it more powerful.

## Merging Multiple Documents

A document can be created from one file or multiple files, so the processor can be used to merge multiple files into one without having to configure anything on [`PSPDFProcessorConfiguration`][]. To achieve this, you have to create multiple [data providers][] and then initialize the [`PSPDFDocument`][] using [`initWithDataProviders:`][]:

[==

```swift
// Create `PSPDFFileDataProvider` number one with a URL that points to a PDF.
let fileProvider1 = PSPDFFileDataProvider(fileURL: writableURL1)
// Create `PSPDFFileDataProvider` number two with a URL that points to a PDF.
let fileProvider2 = PSPDFFileDataProvider(fileURL: writableURL2)
// Initialize the `PSPDFDocument` with an array of data providers.
let document = PSPDFDocument(dataProviders:[fileProvider1, fileProvider2])
```

```objc
// Create `PSPDFFileDataProvider` number one with a URL that points to a PDF.
PSPDFFileDataProvider *fileProvider1 = [[PSPDFFileDataProvider alloc] initWithFileURL:writableURL1];
// Create `PSPDFFileDataProvider` number two with a URL that points to a PDF.
PSPDFFileDataProvider *fileProvider2 = [[PSPDFFileDataProvider alloc] initWithFileURL:writableURL2];
// Initialize the `PSPDFDocument` with an array of data providers.
PSPDFDocument *document = [[PSPDFDocument alloc] initWithDataProviders:@[fileProvider1, fileProvider2]];
```

==]

## Flattening Annotations

When flattening an annotation, the annotation is removed from the document, while its visual representation is kept intact. A flattened annotation is still visible but no longer editable by your users or by your app. This can be used to, for example, fix annotations onto your document or to make annotations visible to viewers that cannot show annotations (like Safari on iOS). If not otherwise specified, the processor will keep all annotations as they are.

To change how annotations are processed, use [`-[PSPDFProcessorConfiguration modifyAnnotationsOfTypes:change:]`][modifyAnnotationsOfTypes:change:]. With the [`PSPDFAnnotationChange`][] enum, you can choose between flattening annotations, removing annotations, or saving annotations into the document (which is the default). In most cases, you’ll want to use [`PSPDFAnnotationTypeAll`][] to apply this change on all annotations, including forms. In some cases, excluding links but flattening all other types might be desirable. This can be achieved with the following:

[==

```swift
var types = PSPDFAnnotationType.all
types.remove(.link)
```

```objc
PSPDFAnnotationTypeAll & ~PSPDFAnnotationTypeLink
```

==]

## Flattening Forms

Form elements are of the special annotation type [`PSPDFAnnotationTypeWidget`][]. You can use the above mentioned method to control flattening for all the form types, or you can change them with [`PSPDFFormFieldType`][], using [`-[PSPDFProcessorConfiguration modifyFormsOfType:change:]`][modifyFormsOfType:change:].

For example, you might not want to flatten a signature annotation, as only the visual representation of the digital signature, and not the actual digital signature, would be included in the resulting document.

## Scaling Pages

You can also use [`PSPDFProcessor`][] to scale pages of a document:

[==

```swift
// Create default configuration.
let configuration = PSPDFProcessorConfiguration(document: document)!

// Scale page down to half its size.
let pageInfo = document.pageInfoForPage(at: page)!
let pageSize = pageInfo.size
let newPageSize = CGSize(width: pageSize.width / 2, height: pageSize.height / 2)
configuration.scalePage(page, to: newPageSize)

// Start the conversion from `document` to `scaledDocumentURL`.
let processor = PSPDFProcessor(configuration: configuration, securityOptions: nil)
try! processor.write(toFileURL: scaledDocumentURL)
```

```objc
// Create default configuration.
PSPDFProcessorConfiguration *configuration = [[PSPDFProcessorConfiguration alloc] initWithDocument:document];

// Scale page down to half its size.
PSPDFPageInfo *pageInfo = [document pageInfoForPageAtIndex:page];
CGSize pageSize = pageInfo.size;
CGSize newPageSize = CGSizeMake(pageSize.width/2.f, pageSize.height/2.f);
[configuration scalePage:page toSize:newPageSize];

// Start the conversion from `document` to `scaledDocumentURL`.
PSPDFProcessor *processor = [[PSPDFProcessor alloc] initWithConfiguration:configuration securityOptions:nil];
[processor writeToFileURL:scaledDocumentURL];
```

==]

**ℹ️ Note:** The page scaling feature is only available if you have the [Document Editor component][] enabled in your license.

## Adding Watermarks

[`PSPDFProcessor`][] lets you draw on all pages of a document. This is useful for watermarks or footers:

[==

```swift
// Create default configuration.
let configuration = PSPDFProcessorConfiguration(document: document)!

let renderDrawBlock: PSPDFRenderDrawBlock = { context, page, cropBox, _, _ in
    // Careful! This code is executed on background threads. Only use thread-safe drawing methods.
    let text = "PSPDF Live Watermark On Page \(page + 1)"
    let stringDrawingContext = NSStringDrawingContext()
    stringDrawingContext.minimumScaleFactor = 0.1

    // Add text over the diagonal of the page.
    context.translateBy(x: 0, y: cropBox.size.height / 2)
    context.rotate(by: -.pi / 4)
    let attributes: [NSAttributedString.Key: Any] = [
        .font: UIFont.boldSystemFont(ofSize: 30),
        .foregroundColor: UIColor.red.withAlphaComponent(0.5)
    ]
    text.draw(with: cropBox, options: .usesLineFragmentOrigin, attributes: attributes, context: stringDrawingContext)
}

configuration.draw(onAllCurrentPages: renderDrawBlock)

// Start the conversion from `document` to `processedDocumentURL`.
let processor = PSPDFProcessor(configuration: configuration, securityOptions: nil)
try! processor.write(toFileURL: processedDocumentURL)
```

```objc
// Create default configuration.
PSPDFProcessorConfiguration *configuration = [[PSPDFProcessorConfiguration alloc] initWithDocument:document];

PSPDFRenderDrawBlock renderBlock = ^(CGContextRef context, NSUInteger page, CGRect cropBox, NSUInteger rotation, NSDictionary *options) {
    // Careful! This code is executed on background threads. Only use thread-safe drawing methods.
    NSString *text = [NSString stringWithFormat:@"PSPDFKit Live Watermark on page %d", page + 1];
    NSStringDrawingContext *stringDrawingContext = [NSStringDrawingContext new];
    stringDrawingContext.minimumScaleFactor = 0.1f;

    // Add text over the diagonal of the page.
    CGContextTranslateCTM(context, 0.f, cropBox.size.height/2.f);
    CGContextRotateCTM(context, -(CGFloat)M_PI / 4.f);
    [text drawWithRect:cropBox
               options:NSStringDrawingUsesLineFragmentOrigin
            attributes:@{NSFontAttributeName: [UIFont boldSystemFontOfSize:100],
                         NSForegroundColorAttributeName: [UIColor.redColor colorWithAlphaComponent:0.5f]}
               context:stringDrawingContext];
};

[configuration drawOnAllCurrentPages:renderBlock];

// Start the conversion from `document` to `processedDocumentURL`.
PSPDFProcessor *processor = [[PSPDFProcessor alloc] initWithConfiguration:configuration securityOptions:nil];
[processor writeToFileURL:processedDocumentURL];
```

==]

This can also be added as a rendering on the document without generating a new document. Please also have a look at `PSCExportWatermarkExample` in the PSPDFCatalog, where this is shown in action:

[==

```swift
let renderDrawBlock: PSPDFRenderDrawBlock = { context, page, cropBox, _ in
    // Careful! This code is executed on background threads. Only use thread-safe drawing methods.
    let text = "PSPDF Live Watermark On Page \(page + 1)"
    let stringDrawingContext = NSStringDrawingContext()
    stringDrawingContext.minimumScaleFactor = 0.1

    // Add text over the diagonal of the page.
    context.translateBy(x: 0, y: cropBox.size.height / 2)
    context.rotate(by: -.pi / 4)
    let attributes: [NSAttributedString.Key: Any] = [
        .font: UIFont.boldSystemFont(ofSize: 30),
        .foregroundColor: UIColor.red.withAlphaComponent(0.5)
    ]
    text.draw(with: cropBox, options: .usesLineFragmentOrigin, attributes: attributes, context: stringDrawingContext)
}

document.updateRenderOptions(for: .all) { options in
    options.drawBlock = renderDrawBlock
}
```

```objc
const PSPDFRenderDrawBlock drawBlock = ^(CGContextRef context, NSUInteger page, CGRect cropBox, PSPDFRenderOptions *options) {
    // Careful, this code is executed on background threads. Only use thread-safe drawing methods.
    NSString *text = @"PSPDFKit Live Watermark";
    NSStringDrawingContext *stringDrawingContext = [NSStringDrawingContext new];
    stringDrawingContext.minimumScaleFactor = 0.1;

	// Add text over the diagonal of the page.
    CGContextTranslateCTM(context, 0.0, cropBox.size.height / 2.0);
    CGContextRotateCTM(context, -(CGFloat)M_PI / 4.0);
    [text drawWithRect:cropBox options:NSStringDrawingUsesLineFragmentOrigin attributes:@{ NSFontAttributeName: [UIFont boldSystemFontOfSize:100], NSForegroundColorAttributeName: [UIColor.redColor colorWithAlphaComponent:0.5] } context:stringDrawingContext];
};

[document updateRenderOptionsForType:PSPDFRenderTypeAll withBlock:^(PSPDFRenderOptions * options){
    options.drawBlock = drawBlock;
}];
```

==]

## Additional Features

Some options in the processor — such as adding pages, rotating pages via [`-[PSPDFProcessorConfiguration rotatePage:by:]`][rotatePage:by:], or moving pages via [`-[PSPDFProcessorConfiguration movePages:toDestinationIndex:]`][movepages:todestinationindex:] — are only available if you have the [Document Editor component][] enabled for your license. Review the header or API documentation for details.

## Website and Office Conversion

PSPDFKit also has the ability to convert websites and Microsoft Office documents to PDF via [`+[PSPDFProcessor generatePDFFromURL:outputFileURL:options:completionBlock:]`][generatePDFFromURL:outputFileURL:options:completionBlock:]. This is an _experimental_ feature, and while it works reasonably well, we cannot offer support for it. It uses many frameworks that Apple intended for printing support. Since we do not own these frameworks nor do we have access to the source code, we are unable to fix bugs in Apple’s parsers. If you require a pixel-perfect conversion, we recommend converting on a server. (This is what large companies such as Box, Dropbox, and Microsoft are doing.)

The Microsoft Office file format is incredibly complex and can only be correctly supported by Microsoft Office itself. The file format is [open][], but [this doesn’t help in rendering all the details correctly][]. In many ways, [it’s more complex than PDF][].

## HTML Conversion

[`PSPDFProcessor`][] can also convert HTML into a PDF. You can use [`+[PSPDFProcessor generatePDFFromHTMLString:options:completionBlock:]`][generatePDFFromHTMLString:options:completionBlock:] or [`+[PSPDFProcessor generatePDFFromHTMLString:outputFileURL:options:completionBlock:]`][generatePDFFromHTMLString:outputFileURL:options:completionBlock:] for this. Note that it only allows simple HTML tags and doesn’t work with complex HTML pages.

## Creating a Password-Protected Document

[`PSPDFProcessor`][] can generate a password-protected document from another document. You can use [`PSPDFProcessor`][] to create a new password-protected PDF document on disk based on a current [`PSPDFDocument`][]. See `CreatePasswordProtectedDocumentExample` from the Catalog app for a complete example of how to create a password-protected document:

[==

```swift
// By default, a newly initialized `PSPDFProcessorConfiguration` results in an exported document that is the same as the input.
let processorConfiguration = PSPDFProcessorConfiguration(document: originalDocument)!

// Set the proper password and key length in `PSPDFDocumentSecurityOptions`.
let documentSecurityOptions = PSPDFDocumentSecurityOptions(ownerPassword: ownerPassword, userPassword: userPassword, keyLength: PSPDFDocumentSecurityOptionsKeyLengthAutomatic)
let processor = PSPDFProcessor(configuration: processorConfiguration, securityOptions: documentSecurityOptions)
try! processor.write(toFileURL: outputFileURL)

// Initialize the password-protected document.
let passwordProtectedDocument = PSPDFDocument(url: ouputFileURL)
```

```objc
// By default, a newly initialized `PSPDFProcessorConfiguration` results in an exported document that is the same as the input.
PSPDFProcessorConfiguration *processorConfiguration = [[PSPDFProcessorConfiguration alloc] initWithDocument:originalDocument];

// Set the proper password and key length in `PSPDFDocumentSecurityOptions`.
PSPDFDocumentSecurityOptions *documentSecurityOptions = [[PSPDFDocumentSecurityOptions alloc] initWithOwnerPassword:ownerPassword userPassword:userPassword keyLength:PSPDFDocumentSecurityOptionsKeyLengthAutomatic];

PSPDFProcessor *processor = [[PSPDFProcessor alloc] initWithConfiguration:processorConfiguration securityOptions:documentSecurityOptions];
[processor writeToFileURL:outputFileURL];

// Initialize the password-protected document.
PSPDFDocument *passwordProtectedDocument = [[PSPDFDocument alloc] initWithURL:ouputFileURL];
PSPDFViewController *pdfController = [[PSPDFViewController alloc] initWithDocument:passwordProtectedDocument];
```

==]

## Creating a Document with Restricted Permissions

When a document is flattened, it’s often desirable to also prevent future editing. A document can be configured to lock some permissions behind an owner password to, for example, restrict form filling/any modification. You can accomplish this use case by passing an owner password, a `nil` user password, and the desired permissions to [`-PSPDFDocumentSecurityOptions#initWithOwnerPassword:userPassword:keyLength:permissions:error:`][], like so:

[==

```swift
// By default, a newly initialized `PSPDFProcessorConfiguration` results in an exported document that is the same as the input.
let processorConfiguration = PSPDFProcessorConfiguration(document: originalDocument)!

// Flatten all annotations.
processorConfiguration.modifyAnnotations(ofTypes: .all, change: .flatten)

// Create the document security options with a proper owner password, a `nil` user password, and the permissions.
let documentSecurityOptions = PSPDFDocumentSecurityOptions(ownerPassword: password, userPassword: nil, keyLength: PSPDFDocumentSecurityOptionsKeyLengthAutomatic, permissions: [.printing, .printHighQuality]])

// Initialize the processor with the configuration and the security options.
let processor = PSPDFProcessor(configuration: processorConfiguration, securityOptions: documentSecurityOptions)
try! processor.write(toFileURL: outputFileURL)

// Initialize the password-protected document.
let passwordProtectedDocument = PSPDFDocument(url: ouputFileURL)
```

```objc
// By default, a newly initialized `PSPDFProcessorConfiguration` results in an exported document that is the same as the input.
PSPDFProcessorConfiguration *processorConfiguration = [[PSPDFProcessorConfiguration alloc] initWithDocument:originalDocument];

// Flatten all annotations.
[processorConfiguration modifyAnnotationsOfTypes:PSPDFAnnotationTypeAll change:PSPDFAnnotationChangeFlatten];

// Create the document security options with a proper owner password, a `nil` user password, and the permissions.
PSPDFDocumentSecurityOptions *documentSecurityOptions = [[PSPDFDocumentSecurityOptions alloc] initWithOwnerPassword:password userPassword:nil keyLength:PSPDFDocumentSecurityOptionsKeyLengthAutomatic permissions:PSPDFDocumentPermissionsPrinting | PSPDFDocumentPermissionsPrintHighQuality error:NULL];

// Initialize the processor with the configuration and the security options.
PSPDFProcessor *processor = [[PSPDFProcessor alloc] initWithConfiguration:processorConfiguration securityOptions:documentSecurityOptions];
[processor writeToFileURL:outputFileURL];

// Initialize the password-protected document.
PSPDFDocument *passwordProtectedDocument = [[PSPDFDocument alloc] initWithURL:ouputFileURL];
```

==]

> **ℹ️ Note:** Software such as PSPDFKit or Adobe Acrobat, which comply with the PDF specification, honor document permissions. Some third-party viewers, such as Apple’s Preview app, only have limited handling of permissions and might still allow editing or throw errors after an edit should be saved.

For more details, please refer to our [Document Permissions][document permissions guide] guide.

[`pspdfprocessor`]: https://pspdfkit.com/api/ios/Classes/PSPDFProcessor.html
[`pspdfprocessorconfiguration`]: https://pspdfkit.com/api/ios/Classes/PSPDFProcessorConfiguration.html
[generatePDFFromURL:outputFileURL:options:completionBlock:]: https://pspdfkit.com/api/ios/Classes/PSPDFProcessor.html#/c:objc(cs)PSPDFProcessor(cm)generatePDFFromURL:outputFileURL:options:completionBlock:
[generatePDFFromHTMLString:options:completionBlock:]: https://pspdfkit.com/api/ios/Classes/PSPDFProcessor.html#/c:objc(cs)PSPDFProcessor(cm)generatePDFFromHTMLString:options:completionBlock:
[generatePDFFromHTMLString:outputFileURL:options:completionBlock:]: https://pspdfkit.com/api/ios/Classes/PSPDFProcessor.html#/c:objc(cs)PSPDFProcessor(cm)generatePDFFromHTMLString:outputFileURL:options:completionBlock:
[modifyAnnotationsOfTypes:change:]: https://pspdfkit.com/api/ios/Classes/PSPDFProcessorConfiguration.html#/c:objc(cs)PSPDFProcessorConfiguration(im)modifyAnnotationsOfTypes:change:
[movepages:todestinationindex:]: https://pspdfkit.com/api/ios/Classes/PSPDFProcessorConfiguration.html#/c:objc(cs)PSPDFProcessorConfiguration(im)movePages:toDestinationIndex:
[rotatepage:by:]: https://pspdfkit.com/api/ios/Classes/PSPDFProcessorConfiguration.html#/c:objc(cs)PSPDFProcessorConfiguration(im)rotatePage:by:
[`pspdfannotationchange`]: https://pspdfkit.com/api/ios/Other%20Enums.html#/c:@E@PSPDFAnnotationChange
[`pspdfannotationtypeall`]: https://pspdfkit.com/api/ios/Other%20Enums.html#/c:@E@PSPDFAnnotationType
[it’s more complex than pdf]: ../../troubleshooting/complexities-of-rendering-pdfs/
[open]: https://msdn.microsoft.com/en-us/openspecifications/
[this doesn’t help in rendering all the details correctly]: http://www.joelonsoftware.com/items/2008/02/19.html
[document editor component]: ../../features/document-editor/
[`initwithdataproviders:`]: https://pspdfkit.com/api/ios/Classes/PSPDFDocument.html#/c:objc(cs)PSPDFDocument(im)initWithDataProviders:
[data providers]: https://pspdfkit.com/api/ios/Protocols/PSPDFDataProviding.html
[`pspdfannotationtypewidget`]: https://pspdfkit.com/api/ios/Enums/PSPDFAnnotationType.html#/c:@E@PSPDFAnnotationType@PSPDFAnnotationTypeWidget
[`pspdfformfieldtype`]: https://pspdfkit.com/api/ios/Enums/PSPDFFormFieldType.html
[modifyformsoftype:change:]: https://pspdfkit.com/api/ios/Classes/PSPDFProcessorConfiguration.html#/c:objc(cs)PSPDFProcessorConfiguration(im)modifyFormsOfType:change:
[document editor component]: ../../features/document-editor/
[`-pspdfdocumentsecurityoptions#initwithownerpassword:userpassword:keylength:permissions:error:`]: https://pspdfkit.com/api/ios/Classes/PSPDFDocumentSecurityOptions.html#/c:objc(cs)PSPDFDocumentSecurityOptions(im)initWithOwnerPassword:userPassword:keyLength:permissions:error:
[document permissions guide]: ../../features/document-permissions/
