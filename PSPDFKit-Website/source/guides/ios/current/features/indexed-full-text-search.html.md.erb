---
title: Indexed Full-Text Search (FTS)
section: developers

---

PSPDFKit supports efficient and fast full-text search in PDF documents through [`PSPDFLibrary`][]. This document describes how to get started with [`PSPDFLibrary`][].

## Getting Started

[`PSPDFLibrary`][] relies on a data source to retrieve information about the documents that are to be indexed. The [`PSPDFLibraryDataSource`][] protocol specifies the methods the data source needs to implement. Generally, you will not need to implement your own data source, but instead use the [`PSPDFLibraryFileSystemDataSource`][] class provided to you. You use it as follows:

[==

```swift
guard let library = PSPDFKitGlobal.sharedInstance.library else {
    // FTS feature isn't enabled in your license.
    return
}

// Assume that you have a directory of PDF documents you want to index.
let directoryURL = ...

let dataSource = PSPDFLibraryFileSystemDataSource(library: library, documentsDirectoryURL: directoryURL) { (document, stopPointer) in
    // If you want to skip a specific document, return false here.
    // If you want to stop the directory enumeration, set stopPointer.pointee to true.
    return true
}

library.dataSource = dataSource

// Begins the indexing operation. This method performs some initial work synchronously and then starts the indexing, which is asynchronous.
// For large amounts of documents, even the initial work could be slow, which is why this should always be called on a background queue.
DispatchQueue.global(qos: .background).async {
    library.updateIndex()
}
```

```objc
PSPDFLibrary *library = PSPDFKitGlobal.sharedInstance.library;
if (!library) {
    // FTS feature isn't enabled in your license.
    return;
}

// Assume that you have a directory of PDF documents you want to index.
NSURL *directoryURL = ...;
PSPDFLibraryFileSystemDataSource *fileDataSource = [[PSPDFLibraryFileSystemDataSource alloc] initWithLibrary:library documentsDirectoryURL:directoryURL documentHandler:^(PSPDFDocument *document, BOOL *stop) {
    // If you want to skip a specific document, return NO here.
    // If you want to stop the directory enumeration, set *stop to YES.
    return YES;
}];

library.dataSource = fileDataSource; // Note that PSPDFLibrary holds the data source with a strong reference.

// Begins the indexing operation. This method performs some initial work synchronously and then starts the indexing, which is asynchronous.
// For large amounts of documents, even the initial work could be slow, which is why this should always be called on a background queue.
dispatch_async(dispatch_get_global_queue(QOS_CLASS_BACKGROUND), ^{
    [library updateIndexWithCompletionHandler:nil];
});
```

==]

Note that you should always set the library’s data source, and not just when you want to update the index. A good place do to this is your app delegate’s `-application:willFinishLaunchingWithOptions:`.

[`PSPDFLibrary`][] posts notifications as the index status changes. The following notifications are available:

- [`PSPDFLibraryWillStartIndexingDocumentNotification`][]
- [`PSPDFLibraryDidFinishIndexingDocumentNotification`][]
- [`PSPDFLibraryDidRemoveDocumentNotification`][]
- [`PSPDFLibraryDidClearIndexesNotification`][]

You’ll usually observe the [`PSPDFLibraryDidFinishIndexingDocumentNotification`][] to perform a search as more and more documents become available:

[==

```swift
// Assume that `libraryDidFinishIndexing(_:)` has been registered with `NotificationCenter.default`.
func libraryDidFinishIndexing(notification: Notification) {
    guard let library = PSPDFKitGlobal.sharedInstance.library else {
        // FTS feature isn't enabled in your license.
        return
    }
    if !library.isIndexing {
        // All documents have been indexed.
    }
    library.documentUIDs(matching: "PSPDFKit", options: nil) { searchString, resultSet in
        for (UID, indexSet) in resultSet {
            print("Found the following matches in document \(UID): \(indexSet)")
        }
    }
}
```

```objc
// Assume that `libraryDidFinishIndexing:` has been registered with `NSNotificationCenter.defaultNotificationCenter`.
- (void)libraryDidFinishIndexing:(NSNotification *)notification {
    PSPDFLibrary *library = PSPDFKitGlobal.sharedInstance.library;

    if (!library.isIndexing) {
        // All documents have been indexed.
    }

    [library documentUIDsMatchingString:@"PSPDFKit"
                                options:nil
                      completionHandler:^(NSString *searchString, NSDictionary *resultSet) {
        for (NSString *UID in resultSet) {
            NSIndexSet *indexSet = resultSet[UID];
            NSLog(@"Found the following matches in document %@: %@", UID, indexSet);
        }
    }];
}
```

==]

You can decide to only query the library if all documents have been indexed by using `isIndexing`. You can also check the current status for individual documents by using [`-indexStatusForUID:withProgress:`][]. The results are delivered to you in an `NSDictionary` that maps the UID of documents as an `NSString` to an `NSIndexSet`. An index is set in the `NSIndexSet` of a given document if the search string occurs on that page.

## Preview Generation

[`PSPDFLibrary`][] can also generate a small snippet of text around each match it finds. When calling [`-documentUIDsMatchingString:options:completionHandler:previewTextHandler:`][], if the `previewTextHandler` parameter is not `nil`, [`PSPDFLibrary`][] will also generate previews. Note that preview generation will have a performance impact, as additional information needs to be extracted from the database. [`PSPDFDocumentPickerController`][] leverages preview generation when displaying results, as shown below.

![Preview example](/images/guides/ios/features/indexed-full-text-search/ios-document-picker-controller.png)

## Advanced Matching Options

[`PSPDFLibrary`][] offers advanced matching options. Pass these options in an `NSDictionary` when calling [`-documentUIDsMatchingString:options:completionHandler:previewTextHandler:`][]:

| Name                                                  | Type         | Description                                                                                       |
| ----------------------------------------------------- | ------------ | ------------------------------------------------------------------------------------------------- |
| [`PSPDFLibraryMaximumSearchResultsTotalKey`][]        | `NSUInteger` | The maximum amount of search results for the total of all documents. Defaults to 500.             |
| [`PSPDFLibraryMaximumSearchResultsPerDocumentKey`][]  | `NSUInteger` | The maximum amount of search results per document.                                                |
| [`PSPDFLibraryMaximumPreviewResultsTotalKey`][]       | `NSUInteger` | The maximum amount of preview search results of all documents. Defaults to 500.                   |
| [`PSPDFLibraryMaximumPreviewResultsPerDocumentKey`][] | `NSUInteger` | The maximum amount of preview search results per document.                                        |
| [`PSPDFLibraryMatchExactWordsOnlyKey`][]              | `BOOL`       | Only matches exact words. For example, “something” would not match “some.”                        |
| [`PSPDFLibraryMatchExactPhrasesOnlyKey`][]            | `BOOL`       | Only matches exact phrases. For example, “this is a test” would not match “this is a quick test.” |

## Advanced Configuration

You can configure [`PSPDFLibrary`][] to match your needs. The following properties on [`PSPDFLibrary`][] are available.

| Property                     | Type       | Default | Description                                                                                                                                                              |
| ---------------------------- | ---------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| [`tokenizer`][]              | `NSString` | `nil`   | The tokenizer used by the library. `nil` means PSPDFKit’s Porter tokenizer is used. You can learn more about this advanced topic by reading [Using Custom Tokenizers][]. |
| [`saveReversedPageText`][]   | `BOOL`     | `YES`   | This indicates if the reversed text of a PDF document should be saved. This increases the size of the cache by about 2x, but allows for ends-with searches.              |
| [`shouldIndexAnnotations`][] | `BOOL`     | `YES`   | This specifies whether contents of annotations in documents should be indexed as well.                                                                                   |

You can also create your own instance of [`PSPDFLibrary`][]. Simply use [`+libraryWithPath:`][] to create a new instance. `path` must be the path to an empty directory. If `path` does not yet exist, the library will create it for you. The SQLite database cache will be stored there. Subsequent calls to [`+libraryWithPath:`][] will always return the same object.

## Indexing Priority

You can also specify the priority of the background queue used for indexing. This can only be changed on creation of the library, and it defaults to `PSPDFLibraryIndexingPriorityLow`. If you require faster indexing, you can do one of two things:

- Create your own [`PSPDFLibrary`][] instance as described above.
- Specify a `PSPDFLibraryIndexingPriorityKey` in the options passed into [`setLicenseKey:options:`][] to change the priority used by the default library.

## SQLite FTS Version

The default [`PSPDFLibrary`][] (available via `PSPDFKitGlobal.sharedInstance`) uses the highest version of SQLite’s full-text search available. The version of SQLite shipping with iOS 9 and 10 does not have FTS5 enabled, and therefore will only use FTS4. FTS5 will be automatically enabled if you use a [custom version of SQLite][] with the correct compile flags. You can also specify which version of FTS to use by using the [`+libraryWithPath:ftsVersion:tokenizer:error:`][] method to create a new instance.

## File System Data Source with Encrypted or Locked Documents

If you need your locked documents to be indexed, you can set the file system data source’s [`documentProvider`][] property to an object that implements the [`PSPDFLibraryFileSystemDataSourceDocumentProvider`][] protocol. You can then use it as follows:

[==

```swift
class LibraryDocumentProvider: NSObject, PSPDFLibraryFileSystemDataSourceDocumentProvider {
    public func dataSource(_ dataSource: PSPDFLibraryFileSystemDataSource, documentWithUID UID: String?, at fileURL: URL) -> PSPDFDocument? {
        // Create the document as required, ensuring it is decrypted and unlocked and ready to index.
        let document = ...
        if document.isLocked {
            // Unlock document as required.
        }
        return document
    }
}

let library = PSPDFKitGlobal.sharedInstance.library! // Replace this with your custom library, if you use one.
let dataSource = PSPDFLibraryFileSystemDataSource(library: library, documentsDirectoryURL: URL(), documentHandler: nil)
self.libraryDocumentProvider = LibraryDocumentProvider()
dataSource.documentProvider = libraryDocumentProvider
library.dataSource = dataSource
library.updateIndex()
```

```objc
@interface LibraryDocumentProvider : NSObject <PSPDFLibraryFileSystemDataSourceDocumentProvider>
@end

@implementation LibraryDocumentProvider

- (PSPDFDocument *)dataSource:(PSPDFLibraryFileSystemDataSource *)dataSource documentWithUID:(NSString *)UID atURL:(NSURL *)fileURL {
    // Create the document as required, ensuring it is decrypted and unlocked and ready to index.
    PSPDFDocument *document = ...;
    if (document.isLocked) {
        // Unlock document as required.
    }
    return document;
}

@end

self.documentProvider = [LibraryDocumentProvider new];
PSPDFLibraryFileSystemDataSource *dataSource = ...;
dataSource.documentProvider = documentProvider;

PSPDFLibrary *library = PSPDFKitGlobal.sharedInstance.library; // Replace this with your custom library, if you use one.
library.dataSource = dataSource;
[library updateIndexWithCompletionHandler:nil];
```

==]

## File System Data Source Performance

In most cases, [`PSPDFLibraryFileSystemDataSource`][] is fast enough, and it automatically detects changes to the file system when requested by a [`PSPDFLibrary`][]. However, each call to [`-[PSPDFLibrary updateIndexWithCompletionHandler:]`][pspdfkit api updateindex] makes the data source traverse its documents directory to detect changes. If this is called rapidly, it could result in a slowdown if the number of files in the directory is large. If your app is responsible for changes in the directory, you can manually specify these changes to the [`PSPDFLibraryFileSystemDataSource`][] object by enabling Explicit Mode (starting with PSPDFKit 6.2.2 for iOS). This can be done as follows:

[==

```swift
let dataSource = ...
dataSource.isExplicitModeEnabled = true

// Consider a case where you know that a document has been added to or changed in the data source's documents directory and already have the location.
let addedDocumentURL = ...
dataSource.didAddOrModifyDocument(at: addedDocumentURL)

// Similarly, if a document has been removed:
let removedDocumentURL = ...
dataSource.didRemoveDocument(at: removedDocumentURL)
```

```objc
PSPDFLibraryFileSystemDataSource *dataSource = ...;
dataSource.explicitModeEnabled = YES;

// Consider a case where you know that a document has been added to or changed in the data source's documents directory and already have the location.
NSURL *addedDocumentURL = ...;
[dataSource didAddOrModifyDocumentAtURL:addedDocumentURL];

// Similarly, if a document has been removed:
NSURL *removedDocumentURL = ...;
[dataSource didRemoveDocumentAtURL:removedDocumentURL];
```

==]

Note that using these methods on the data source does not automatically add or remove documents from the library. The data source notes the changes made, and it then specifies them to the `PSPDFLibrary` object when requested during the next call to [`-[PSPDFLibrary updateIndexWithCompletionHandler:]`][pspdfkit api updateindex].

Explicit mode should only be enabled in cases where you need to call [`-[PSPDFLibrary updateIndexWithCompletionHandler:]`][pspdfkit api updateindex] multiple times in a short period of time, and where you also know the changes being made on the file system. In all other cases, let the data source handle the change detection, and keep `explicitModeEnabled` set to `NO`.

## Spotlight Indexing

[`PSPDFLibrary`][] can also optionally index documents with Spotlight, so the user can search for documents (and their text) right from the native device search. To enable this, set up [`PSPDFLibrary`][] as described above, and set the [`spotlightIndexingType`][] property before calling [`updateIndexWithCompletionHandler:`][pspdfkit api updateindex]. This can be set to one of the following:

- `PSPDFLibrarySpotlightIndexingDisabled` — Documents are not indexed in Spotlight.
- `PSPDFLibrarySpotlightIndexingEnabled` — Documents are indexed in Spotlight, but their text is not.
- `PSPDFLibrarySpotlightIndexingEnabledWithFullText` — Documents are indexed in Spotlight with their full text.

## Retrieving Documents from Spotlight

When the user taps on a searchable item from your app in Spotlight search results, your app delegate’s `application:continueUserActivity:restorationHandler:` method is called.
In your implementation of this method, call [`-[PSPDFLibrary fetchSpotlightIndexedDocumentForUserActivity:completionHandler]`](<https://pspdfkit.com/api/ios/Classes/PSPDFLibrary.html#/c:objc(cs)PSPDFLibrary(im)fetchSpotlightIndexedDocumentForUserActivity:completionHandler:>) to retrieve the document, if any:

[==

```swift
func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([Any]?) -> Void) -> Bool {
    guard let library = PSPDFKitGlobal.sharedInstance.library else {
        logError("Unable to get shared PSPDFLibrary instance to continue user activity.")
        return false
    }
    library.fetchSpotlightIndexedDocument(for: userActivity) { document in
        guard let document = document else { return }
        // Open the document in a PSPDFViewController.
    }

    return true
}
```

```objc
- (BOOL)application:(NSApplication *)application continueUserActivity:(NSUserActivity *)userActivity restorationHandler:(void (^)(NSArray *restorableObjects))restorationHandler {
    PSPDFLibrary *library = PSPDFKitGlobal.sharedInstance.library;
    if (!library) {
        // FTS feature isn't enabled in your license.
        return NO;
    }
    [PSPDFKitGlobal.sharedInstance.library fetchSpotlightIndexedDocumentForUserActivity:userActivity completionHandler:^(PSPDFDocument *document) {
        if (!document) {
            return;
        }
        // Open the document in a PSPDFViewController.
    }];
    return YES;
}
```

==]

[`+librarywithpath:`]: https://pspdfkit.com/api/ios/Classes/PSPDFLibrary.html#/c:objc(cs)PSPDFLibrary(cm)libraryWithPath:error:
[`+librarywithpath:ftsversion:tokenizer:error:`]: https://pspdfkit.com/api/ios/Classes/PSPDFLibrary.html#/c:objc(cs)PSPDFLibrary(cm)libraryWithPath:ftsVersion:tokenizer:error:
[`pspdflibrarydatasource`]: https://pspdfkit.com/api/ios/Protocols/PSPDFLibraryDataSource.html
[`pspdflibraryfilesystemdatasource`]: https://pspdfkit.com/api/ios/Classes/PSPDFLibraryFileSystemDataSource.html
[`documentprovider`]: https://pspdfkit.com/api/ios/Classes/PSPDFLibraryFileSystemDataSource.html#/c:objc(cs)PSPDFLibraryFileSystemDataSource(py)documentProvider
[`pspdflibraryfilesystemdatasourcedocumentprovider`]: https://pspdfkit.com/api/ios/Protocols/PSPDFLibraryFileSystemDataSourceDocumentProvider.html
[5]: https://developer.apple.com/reference/uikit/uiapplicationdelegate/1623072-application
[`pspdflibrarywillstartindexingdocumentnotification`]: https://pspdfkit.com/api/ios/Other%20Constants.html#/c:@PSPDFLibraryWillStartIndexingDocumentNotification
[`pspdflibrarydidfinishindexingdocumentnotification`]: https://pspdfkit.com/api/ios/Other%20Constants.html#/c:@PSPDFLibraryDidFinishIndexingDocumentNotification
[`pspdflibrarydidremovedocumentnotification`]: https://pspdfkit.com/api/ios/Other%20Constants.html#/c:@PSPDFLibraryDidRemoveDocumentNotification
[`pspdflibrarydidclearindexesnotification`]: https://pspdfkit.com/api/ios/Other%20Constants.html#/c:@PSPDFLibraryDidClearIndexesNotification
[`-indexstatusforuid:withprogress:`]: https://pspdfkit.com/api/ios/Classes/PSPDFLibrary.html#/c:objc(cs)PSPDFLibrary(im)indexStatusForUID:withProgress:
[`-documentuidsmatchingstring:options:completionhandler:previewtexthandler:`]: https://pspdfkit.com/api/ios/Classes/PSPDFLibrary.html#/c:objc(cs)PSPDFLibrary(im)documentUIDsMatchingString:options:completionHandler:previewTextHandler:
[`pspdflibrarymaximumsearchresultstotalkey`]: https://pspdfkit.com/api/ios/Other%20Constants.html#/c:@PSPDFLibraryMaximumSearchResultsTotalKey
[`pspdflibrarymaximumsearchresultsperdocumentkey`]: https://pspdfkit.com/api/ios/Other%20Constants.html#/c:@PSPDFLibraryMaximumSearchResultsPerDocumentKey
[`pspdflibrarymaximumpreviewresultstotalkey`]: https://pspdfkit.com/api/ios/Other%20Constants.html#/c:@PSPDFLibraryMaximumPreviewResultsTotalKey
[`pspdflibrarymaximumpreviewresultsperdocumentkey`]: https://pspdfkit.com/api/ios/Other%20Constants.html#/c:@PSPDFLibraryMaximumPreviewResultsPerDocumentKey
[`pspdflibrarymatchexactwordsonlykey`]: https://pspdfkit.com/api/ios/Other%20Constants.html#/c:@PSPDFLibraryMatchExactWordsOnlyKey
[`pspdflibrarymatchexactphrasesonlykey`]: https://pspdfkit.com/api/ios/Other%20Constants.html#/c:@PSPDFLibraryMatchExactPhrasesOnlyKey
[`tokenizer`]: https://pspdfkit.com/api/ios/Classes/PSPDFLibrary.html#/c:objc(cs)PSPDFLibrary(py)tokenizer
[`savereversedpagetext`]: https://pspdfkit.com/api/ios/Classes/PSPDFLibrary.html#/c:objc(cs)PSPDFLibrary(py)saveReversedPageText
[`spotlightindexingtype`]: https://pspdfkit.com/api/ios/Classes/PSPDFLibrary.html#/c:objc(cs)PSPDFLibrary(py)spotlightIndexingType
[pspdfkit api updateindex]: https://pspdfkit.com/api/ios/Classes/PSPDFLibrary.html#/c:objc(cs)PSPDFLibrary(im)updateIndexWithCompletionHandler
[`pspdflibraryfilesystemdatasource`]: https://pspdfkit.com/api/ios/Classes/PSPDFLibraryFileSystemDataSource.html
[using custom tokenizers]: ../../memory-and-storage/using-custom-tokenizers/
[custom version of sqlite]: ../../miscellaneous/custom-sqlite-library/
[`shouldindexannotations`]: https://pspdfkit.com/api/ios/Classes/PSPDFLibrary.html#/c:objc(cs)PSPDFLibrary(py)shouldIndexAnnotations
[`setlicensekey:options:`]: https://pspdfkit.com/api/ios/Classes/PSPDFKitGlobal.html#/c:objc(cs)PSPDFKitGlobal(cm)setLicenseKey:options:
[`pspdfdocumentpickercontroller`]: https://pspdfkit.com/api/ios/Classes/PSPDFDocumentPickerController.html
