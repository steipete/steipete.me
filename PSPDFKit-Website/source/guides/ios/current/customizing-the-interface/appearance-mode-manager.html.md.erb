---
title: Appearance Mode Manager
section: developers
alternate_platform_links:
  android: "customizing-the-interface/appearance-styling"
---

PSPDFKit allows you to customize PDF rendering styles (i.e. page and text colors), along with its app theme, via [`PSPDFAppearanceModeManager`][].

<img width="60%" alt="Appearance Mode Night" src="/images/guides/ios/customizing-the-interface/appearance-mode-manager/appearance-mode-night.png">
<p align="center">Night Appearance Mode</p>

**ℹ️ Note:** Changing the appearance mode will change the PDF rendering style, but it does not modify the PDF on disk.

## Appearance Mode

You can programmatically set the appearance mode for your [`PSPDFViewController`][]’s [`PSPDFAppearanceModeManager`][] like so:

[==

```swift
let pdfController = ...
pdfController.appearanceModeManager.appearanceMode = .sepia
```

```objc
PSPDFViewController *pdfController = ...
pdfController.appearanceModeManager.appearanceMode = PSPDFAppearanceModeSepia;
```

==]

The default value of the [`PSPDFAppearanceMode`][] of a [`PSPDFViewController`][]’s [`PSPDFAppearanceModeManager`][] is `PSPDFAppearanceModeDefault`.

## Allowed Appearance Modes

You can set the [`allowedAppearanceModes`][] in [`PSPDFSettingsViewController`][] in your [`PSPDFConfiguration`][] like so:

[==

```swift
let configuration = PSPDFConfiguration { (builder) in
    builder.allowedAppearanceModes = [.night]
}
```

```objc
PSPDFConfiguration *configuration = [PSPDFConfiguration configurationWithBuilder:^(PSPDFConfigurationBuilder *builder) {
    builder.allowedAppearanceModes = PSPDFAppearanceModeNight;
}];
```

==]

<img width="60%" alt="Allowed Appearance Modes" src="/images/guides/ios/customizing-the-interface/appearance-mode-manager/allowed-appearance-modes.png">

## Color Transformation

When applying [`PSPDFAppearanceModeNight`], a color-correct night mode is used, and in addition to this simply inverting the colors, there is some extra transformation involved. There are separate steps for converting a `UIColor` from normal to night mode and for changing the document page rendering to night mode.

### Document Rendering

The most obvious aspect of the night appearance mode is that the rendering of document pages is changed from the default to the color-correct rendering. This is done by post-processing the rendered document page image. Below you’ll see the default rendering.

<img alt="Default Rendering" src="/images/guides/ios/customizing-the-interface/appearance-mode-manager/default-rendering.png">

Inverting colors is a simple way to achieve night mode, as this will result in, for example, a white page background becoming black. However, since this will also change colors of text and images, some parts of the document might look odd when simply inverted. Below you’ll see that the text and graph colors are no longer similar to their original colors.

<img alt="Inverted Rendering" src="/images/guides/ios/customizing-the-interface/appearance-mode-manager/inverted-rendering.png">

To address this, we added another step to achieve color-correct night mode, which means that the colors in night mode are hues similar to the colors in the default rendering, as shown below.

<img alt="Color-Correct Inverted Rendering" src="/images/guides/ios/customizing-the-interface/appearance-mode-manager/color-correct-inverted-rendering.png">

### UIColor

There are various parts in the UI where we are using a raw `UIColor`. One example of this is the color of annotations during drawing when the annotations are not yet rendered on the page. In color-correct night mode, these colors are adjusted, similar to how changes are applied for document rendering, and this results in the same color-correct night mode color for all shown content.

Adapting `UIColor` has to be done in addition to document page rendering. This is because the rendering of existing annotations on the document page and the rendering of annotations while they are being created use different code paths, and both paths require the same color transformation applied in slightly different ways.

For more information and the algorithms used to get color-correct night mode, [contact us][support].

[`pspdfappearancemodemanager`]: https://pspdfkit.com/api/ios/Classes/PSPDFAppearanceModeManager.html
[`pspdfviewcontroller`]: https://pspdfkit.com/api/ios/Classes/PSPDFViewController.html
[`pspdfappearancemode`]: https://pspdfkit.com/api/ios/Enums/PSPDFAppearanceMode.html
[`allowedappearancemodes`]: https://pspdfkit.com/api/ios/Classes/PSPDFConfiguration.html#/c:objc(cs)PSPDFConfiguration(py)allowedAppearanceModes
[`pspdfsettingsviewcontroller`]: https://pspdfkit.com/api/ios/Classes/PSPDFSettingsViewController.html
[`pspdfconfiguration`]: https://pspdfkit.com/api/ios/Classes/PSPDFConfiguration.html
[`pspdfappearancemodenight`]: https://pspdfkit.com/api/ios/Enums/PSPDFAppearanceMode.html#/c:@E@PSPDFAppearanceMode@PSPDFAppearanceModeNight
[support]: https://pspdfkit.com/support/request
