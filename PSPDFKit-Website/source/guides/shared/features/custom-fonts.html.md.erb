---
title: Custom Fonts
section: developers
---

PDF files are supposed to be rendered exactly the same, no matter which PDF viewer you’re using. One reason why this is the case is because a PDF file can embed the fonts required to render it.
 
However, sometimes — due to size reasons or other considerations — fonts are not embedded, which makes the PDF viewer look for fonts on the current system. Depending on the fonts that are available, this can cause rendering problems.

While the best option is to always embed the fonts in the PDF, this isn’t always possible, especially if you’re working with third-party PDF files. This is where custom font path support comes in.

<% if web? %>

Plus, a font that includes all characters is usually more than 200&nbsp;MB in size. That’s tough for a web browser. To do this effectively (and to make it work at all in older browsers) this needs a server. That’s why we built custom font path support into PSPDFKit Server.

This can be done by adding the following to your `docker-compose.yml` file, like so:

```
pspdfkit:
  volumes:
    - /font-directory-path-on-the-host:/custom-fonts
```

At this time, it is not possible to add custom fonts in standalone. However, this is something we are looking into.

<% end %>

<% if ios? %>

iOS comes with a relatively complete set of fonts, so it usually isn’t necessary to add a custom font path, except in special circumstances. We provide an example of how to properly do this in our SDK DMG file found in `Examples/CustomFontPath`.

The important part is supplying the extra font path when setting the license using the option [`PSPDFAdditionalFontDirectories`][]:

[==

```swift
let additionalFontDirectory = Bundle.main.bundleURL.appendingPathComponent("AdditionalFonts", isDirectory: true).path
let options = [PSPDFSettingKey.additionalFontDirectories: [additionalFontDirectory]]
PSPDFKitGlobal.setLicenseKey("YOUR_LICENSE_KEY_GOES_HERE", options: options)
```

```objc
NSString* additionalFontDirectory = [[NSBundle.mainBundle bundleURL] URLByAppendingPathComponent:@"AdditionalFonts" isDirectory:YES].path;
NSDictionary<PSPDFSettingKey, id>* options = @{PSPDFAdditionalFontDirectories: @[additionalFontDirectory]};
[PSPDFKitGlobal setLicenseKey:@"YOUR_LICENSE_KEY_GOES_HERE" options:options];
```

==]

This should be done as early as possible in the application’s launch process, like in [`application(_:willFinishLaunchingWithOptions:)`][]. You can read more about when to set the license key in [Adding the License Key][].

<% end %>

<% if android? %>

There are many varieties of Android devices out there, and not all of them come with a full set of fonts. For example, some of them are missing some international fonts, so you may have to ship them with your application.

The Android SDK download comes with an example of how to properly use custom font paths. This can be found in `examples/custom-fonts`.

## Loading Custom Fonts

Using custom fonts in your app requires two steps.

1.  Disabling automatic initialization of PSPDFKit by omitting the `pspdfkit_license_key` metadata element in your Android manifest. This is necessary, since you need to provide custom font paths when initializing PSPDFKit manually in the next step.

2.  Initializing PSPDFKit manually, providing the paths to your custom fonts:

    [==

    ```kotlin
    // You can use any folder (private or on the external storage) for
    // fonts. It is important that your font files are inside this folder
    // and that your app has read access to it.
    val appFonts = getDir("fonts", Context.MODE_PRIVATE)

    // You can provide as many additional custom font folders as you like.
    val fontFolders = listOf(appFonts.absolutePath)

    // Custom font folders are provided at library initialization time.
    PSPDFKit.initialize(this, licenseString, fontFolders)
    ```

    ```java
    // You can use any folder (private or on the external storage) for
    // fonts. It is important that your font files are inside this folder
    // and that your app has read access to it.
    File appFonts = getDir("fonts", Context.MODE_PRIVATE);

    // You can provide as many additional custom font folders as you like.
    List<String> fontFolders = Arrays.asList(appFonts.absolutePath);

    // Custom font folders are provided at library initialization time.
    PSPDFKit.initialize(this, licenseString, fontFolders);
    ```

    ==]

If you are missing international fonts when rendering on certain Android devices, the [Google Noto Fonts][] are usually a good choice to include in your app.

<% end %>

The font directory can be any directory that is accessible to the app, and all `.ttf`, `.ttc`, and `.otf` files will be added to the font list of PSPDFKit.

## Microsoft Core Fonts

Core fonts for the Web was a project started by Microsoft in 1996 to create a standard pack of fonts for the World Wide Web. It included the proprietary fonts Andalé Mono, Arial, Arial Black, Comic Sans MS, Courier New, Georgia, Impact, Times New Roman, Trebuchet MS, Verdana and Webdings, all of them in TrueType font format. [(Read more on Wikipedia)](https://en.wikipedia.org/wiki/Core_fonts_for_the_Web)

While Microsoft no longer offers these files directly, [they can be legally downloaded](https://sourceforge.net/projects/corefonts/files/the%20fonts/final/). The [EULA](http://corefonts.sourceforge.net/eula.htm) prohibts redistribution, however you can download them and add it to our Server product via the Custom Fonts feature. You can use free software such as [7-Zip](https://www.7-zip.org/) to extract the .TTF font files from the downloaded packages.

These fonts are widely used on the Web and PDF files and will improve render fidelity for PDF documents that use these fonts.

[`pspdfadditionalfontdirectories`]: https://pspdfkit.com/api/ios/Other%20Constants.html#/c:@PSPDFAdditionalFontDirectories
[`application(_:willfinishlaunchingwithoptions:)`]: https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623032-application
[adding the license key]: https://pspdfkit.com/guides/ios/current/getting-started/adding-the-license-key/
[google noto fonts]: https://www.google.com/get/noto/
