---
title: Bug Reporting
section: developers
---

If you experience a bug or crash you believe is related to PSPDFKit, [please let us know][pspdfkit support].

Writing an SDK is hard. We need to interact with both platform frameworks (e.g. Apple, Google) and your application. There are many potential edge cases depending upon the app you’re building and the way you call our API. We have a large test suite and [regularly write about testing on our blog][pspdfkit blog ludicrous speed], yet there will always be bugs. We usually have [a very fast turnaround time on issues]<% if android? %>[pspdfkit changelog android]<% end %><% if ios? %>[pspdfkit changelog ios]<% end %>, but there are several ways we can make the process of reproducing and fixing bugs more efficient.

**We assume you are using the latest version of <% if android? %>Android Studio<% end %><% if ios? %>Xcode<% end %> and the latest version of the PSPDFKit SDK. If you are not, please update first and verify that the bug still exists — thanks!**

## Checklist for Sending a Crash Report

<% if ios? %>

- Send a symbolicated stack trace. This needs dSYM file integration and bitcode disabled.
  <% end %>
- Tell us about the crash rate. Is it a single crash? What percentage of users is affected?
- Send us steps to reproduce the issue, if possible. If you can’t reproduce the issue — for example, if the bug was reported by one of your customers or captured via a crash reporting solution — please mention this as well. If the reproduction steps are a bit fuzzy, try to outline them as best as you can. Often, a video of the procedure that triggers the issue can help us too.
- [Attach application and system logs to your crash reports][adding logging to crash reports] if possible. This makes finding the reason much easier.
- Please do not send screenshots of your code. Either send a runnable sample project or a code snippet as text.
- If you have a sample project that can reproduce the crash, we can fix it.
- Crashes in our SDK can originate from our code, your code, vendor code, or platform provider code. It is not feasible, nor is it possible, to act on every crash report we receive. However, we do our best in offering a stable and reliable software product, and therefore also constantly monitor and analyze crash reports from our own [PDF Viewer][] apps as well.

Depending upon the category of the problem, there are various options that work best for reporting. Keep reading to find out more.

## Incorrect/Partial Rendering

If there’s a PDF that does not render correctly, please send us the file. Before submitting it, you should verify that the latest version of Adobe Acrobat renders the file correctly. We go to [extreme lengths to ensure that even partly broken files are rendered as accurately as possible][pspdfkit guide framework size].

Additionally, you should let us know which particular device and OS you’ve tested with, as different devices and versions might have different settings and fonts installed.

## API Issues

- Send us a **small, runnable example project** that demonstrates the issue. You can start a new project or use one of the samples we provide as a base. Often, it also helps to first try a particular issue with the Catalog sample project (which you get in our [customer portal][] as part of the download). This is because it can tell us if the issue occurs with our samples as well, or only in combination with your app.

- Send us the entire project. Sometimes an issue is based on a complex set of conditions and you may have problems isolating them in a smaller sample project. In that case, we also accept the complete project as a last resort. As part of the license agreement, we have a standard NDA that covers such software exchanges, and we will destroy any material we’ve received once the issue has been resolved. Since projects are usually large, a link to a ZIP file uploaded via Dropbox works best. Please also send a demo user account if one is required.

## Crashes

<% if android? %>
Stack traces that contain PSPDFKit methods contain obfuscated names of packages, classes, and methods. To allow us to quickly retrace the crash, please always send us the stack trace in plain text format, together with the PSPDFKit version number your app is using.

### Obtaining Stack Traces

- Crashes are usually emitted to Logcat. Please don’t make a screenshot of a Logcat view; plain text stack traces will help us investigate your problem faster.

- If you can reproduce your crash while debugging:
  1.  Add a breakpoint to the affected line.
  2.  Click on the Get thread dump button.
  3.  Click on the Export to Text File button in the newly opened Dump tab.
  4.  Send us the generated file.

<img alt="Generate thread dump" src="/images/guides/android/troubleshooting/bug-reporting/generate-thread-dump.gif" />
<% end %>
<% if ios? %>
To allow Xcode and iTunes Connect/TestFlight to symbolicate crash log files, use either [our manual setup to integrate][pspdfkit guide getting started], or CocoaPods, which allows [automatic `.dSYM` uploads][cocoapods dsym support]. Apple has a great guide on [Understanding and Analyzing iOS Application Crash Reports][apple guide understanding crash reports], which is useful for learning more about crash logs in general.

We recommend [adding logging to your crash reports][] to better understand why something isn’t working as intended.

[Understanding Crashes and Crash Logs][] from WWDC 2018 is another great resource.

### Crash Logs on Local Devices

To view crash logs on your iOS device, plug it in. Then, in Xcode, go to [Window > Devices > View Device Logs][apple xcode help]. Select the crash you want to export, right-click, select Export Log, and send us this file. (If you have not opened this window for some time, symbolication might take a while, so please wait until all logs are processed before sending.)

A typical crash log looks like this. We need the complete, unmodified file in order to symbolicate numbers back to symbols so that we can understand and fix the crash:

```
Incident Identifier: 04D56C20-DC56-47D2-92AA-465EB5190548
CrashReporter Key:   c6799642fc0e394b6da37c712fa22669567ceb5d
Hardware Model:      iPhone8,2
Process:             Facebook [248]
Path:                /private/var/containers/Bundle/Application/CE3A5C58-5E69-47A7-B2DB-363CEAA97114/Facebook.app/Facebook
Identifier:          com.facebook.Facebook
Version:             28674375 (54.0)
Code Type:           ARM-64 (Native)
Parent Process:      launchd [1]

Date/Time:           2016-05-04 10:42:11.11 +0200
Launch Time:         2016-05-03 23:51:36.36 +0200
OS Version:          iOS 9.3.2 (13F68)
Report Version:      105

Exception Type:  EXC_BREAKPOINT (SIGTRAP)
Exception Codes: 0x0000000000000001, 0x00000001817ae93c
Triggered by Thread:  31

Filtered syslog:
None found

Global Trace Buffer (reverse chronological seconds):
0.413070     AppleJPEG                 	0x00000001832570c0 [0x12a83f200] Options: 720x540 [FFFFFFFF,FFFFFFFF] 00025060
0.413070     AppleJPEG                 	0x0000000183256f78 [0x12a83f200] Decoding: C2 0x02D0021C 0x00003842 0x22111100 0x00000000 70466



Thread 0 name:  Dispatch queue: com.apple.main-thread
Thread 0:
0   libsystem_kernel.dylib        	0x0000000181374fd8 mach_msg_trap + 8
1   libsystem_kernel.dylib        	0x0000000181374e54 mach_msg + 72
2   CoreFoundation                	0x00000001817acc60 __CFRunLoopServiceMachPort + 196
3   CoreFoundation                	0x00000001817aa964 __CFRunLoopRun + 1032
4   CoreFoundation                	0x00000001816d4c50 CFRunLoopRunSpecific + 384
5   GraphicsServices              	0x0000000182fbc088 GSEventRunModal + 180
6   UIKit                         	0x00000001869be088 UIApplicationMain + 204
7   Facebook                      	0x00000001001e03b4 0x10004c000 + 1655732
8   Facebook                      	0x00000001000ba4a4 0x10004c000 + 451748
9   libdyld.dylib                 	0x00000001812728b8 start + 4
```

### Crash Logs on iTunes Connect/TestFlight

Crashes collected via iTunes Connect can be viewed either online or directly in Xcode via the [Crashes Organizer (Window > Organizer > Crashes)][apple help crash organizer]. Control-click a crash report, choose Show in Finder, and send the selected files to us.

### Crash Logs during Development

Sometimes things will crash while you’re developing in Xcode. Use the `bt all` command in the `lldb` debugging console to print the stack traces of all threads — this works better than a screenshot. Often, we throw an assertion against incorrect API usage. If you have an [exception breakpoint][apple help exception breakpoint] set, you won’t see the contents of this message right away. Press the Continue button until the application terminates in order to see the termination reason. In some cases, this is enough to understand the issue and fix the incorrect usage.

Xcode will not automatically use the `.dSYM` file, even if your setup is correct, so stack traces from PSPDFKit will, in most cases, be incorrect/misleading. You can always pick up the original crash log from `~/Library/Logs/DiagnosticReports/` (this is the default location for crashes on macOS, including ones from the iOS Simulator).

### Manually Symbolicating a Crash Report

If you have a matching binary, crash log, and `.dSYM` file, [you can symbolicate the crash log manually using Xcode’s `symbolicatecrash` or `atos` tools][pspdfkit guide advanced crash report symbolication].
<% end %>

<% if android? %>

## Third-Party Crash Reporting Services

We recommend using a third-party crash reporting service instead of relying solely on the Google Play Developer Console. This allows you to discover more issues and will lead to a more stable product and greater customer satisfaction. There are several services; the most common ones are [Crashlytics/Fabric by Google (formerly Twitter)][crashlytics website] and [Bugsee][bugsee website], which can also record a video leading up to the crash.

## Providing Logs

While the stack trace is already helpful as a starting point, it lacks extra context. Without this extra information, fixing issues often becomes impossible, as any change would just be a shot in the dark. If you are using a third-party crash reporting service, such as Crashlytics, you can enhance the crash reports you receive by including the logging output PSPDFKit produces. To do this, you can attach a custom [`Logger`][] that will send the logs to the crash reporting service you are using.

Below you’ll see how this would work with Crashlytics, but it would work similarly with any other crash reporting service:

[==

```kotlin
 PdfLog.addLogger { priority, tag, message, throwable ->
    // Add our log statement to the Crashlytics log.
    Crashlytics.log(priority, tag, message)
    // We also track handled exceptions so that we get a complete picture of what's going on.
    if (throwable != null) Crashlytics.logException(throwable)
}
```

```java
PdfLog.addLogger((priority, tag, message, throwable) -> {
    // Add our log statement to the Crashlytics log.
    Crashlytics.log(priority, tag, message);
    // We also track handled exceptions so that we get a complete picture of what's going on.
    if (throwable != null) Crashlytics.logException(throwable);
});
```

==]

### NDK Crash Reports

If PSPDFKit is crashing natively (i.e. inside the native libraries), please provide us with a native crash dump. You can define the path for crash dumps via [`PSPDFKit#setNativeCrashDumpPath`][] and download a minidump from that path from your device using `adb pull /path/to/crashDump`. Dumps are in the Google Breakpad format and are also accepted by crash reporting services like Crashlytics.
<% end %>
<% if ios? %>
<% end %>

[pspdfkit blog ludicrous speed]: /blog/2016/running-ui-tests-with-ludicrous-speed/
[adding logging to crash reports]: https://pspdfkit.com/blog/2019/logs-for-your-crash-reports/
[pdf viewer]: https://pdfviewer.io
[crashlytics website]: https://crashlytics.com
[bugsee website]: https://www.bugsee.com/

<% if android? %>
[catalog android]: https://pspdfkit.com/guides/android/current/getting-started/example-projects/#catalog-app
[pspdfkit guide framework size]: ../../faq/framework-size
[pspdfkit changelog android]: /changelog/android
[`pspdfkit#setnativecrashdumppath`]: https://pspdfkit.com/api/android/reference/com/pspdfkit/PSPDFKit.html#setNativeCrashDumpPath(java.lang.String
[`logger`]: https://pspdfkit.com/api/android/reference/com/pspdfkit/utils/PdfLog.Logger.html
<% end %>
<% if ios? %>
[pspdfkit changelog ios]: https://pspdfkit.com/changelog/ios
[pspdfkit guide framework size]: ../../faq/framework-size
[pspdfkit guide getting started]: ../../getting-started/integrating-pspdfkit/
[cocoapods dsym support]: ../../getting-started/using-cocoapods/#dsym-support
[apple guide understanding crash reports]: https://developer.apple.com/library/ios/technotes/tn2151/_index.html
[adding logging to your crash reports]: /blog/2019/logs-for-your-crash-reports/
[understanding crashes and crash logs]: https://developer.apple.com/videos/play/wwdc2018/414/
[apple xcode help]: https://help.apple.com/xcode/mac/8.0/#/dev85c64ec79
[apple help crash organizer]: https://help.apple.com/xcode/mac/8.0/#/dev861f46ea8
[apple help exception breakpoint]: https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/debugging_with_xcode/chapters/debugging_tools.html#//apple_ref/doc/uid/TP40015022-CH8-SW2
[pspdfkit guide advanced crash report symbolication]: ../../troubleshooting/advanced-symbolication
[crashprobe ios]: http://www.crashprobe.com/ios/
[fabric guide upload symbols script]: https://docs.fabric.io/ios/crashlytics/missing-dsyms.html#upload-symbols-script
[apple quicktime player]: https://support.apple.com/en-us/HT201066
[9to5mac record video phone to mac]: http://9to5mac.com/2015/03/21/how-to-record-video-from-phone-to-mac/
<% end %>
