---
title: Instant JSON
section: developers
alternate_platform_links:
  web: importing-exporting/instant-json
---

Instant JSON is our approach to bringing annotations into a modern format while keeping all important properties to make the Instant JSON spec work with PDF. It is fully documented and supports long-term storage.

Instant JSON stores PDF changes like annotations in a separate JSON file. This means that a PDF document will only need to be transferred once and all changes will be added as an overlay to the existing PDF. This approach significantly reduces the bandwidth since you only need to transfer this JSON instead of the complete PDF.

Conceptually, Instant JSON defines a list of `skippedPdfObjectIds`. These point to the PDF’s internal object IDs for annotations. Whenever an object ID is marked as _skipped_, it will no longer be loaded from the original PDF. Instead, it could be defined inside the `annotations` array with the same `pdfObjectId`. If this is the case, the PDF viewer will display the new annotation, which signals an update to the original one. If an object ID is marked as _skipped_ but the `annotations` array does not contain an annotation with the same `pdfObjectId`, it will be interpreted as a _deleted_ annotation. An annotation that is inside the `annotations` array without the `pdfObjectId` property is interpreted as a newly created annotation.

All annotations in the `annotations` array have a unique `id` field. For updated annotations that were already in the original PDF, this field will be the stringified `pdfObjectId`. Newly created annotations will get a newly generated [ULID].

An “empty” Instant JSON contains neither `skippedPdfObjectIds` nor `annotations`, which means the original PDF is untouched. All annotations in the initial PDF are still shown.

## The Format

We use [Flow type declarations][] to specify the format of Instant JSON:

```js
declare type InstantJSON = {
  format: "https://pspdfkit.com/instant-json/v1",
  pdfId?: {
    permanent: string,
    changing: string
  },
  skippedPdfObjectIds?: number[],
  annotations?: Object[],
  formFieldValues?: Object[]
};
```

#### format

This is a literal string that includes the version information.

#### pdfId

This optional key contains an object of a `permanent` PDF ID and a `changing` PDF ID. According to the PDF spec, a PDF document must contain these IDs. We use the `permanent` ID to verify that the PDF you’ve opened together with this Instant JSON is indeed the correct one. The `changing` PDF ID will be updated whenever the PDF file is updated (for example, when saved with different annotations). Since Instant JSON only works with an immutable PDF, the state will be invalid when used with a changed PDF.

Not every PDF will have a valid `permanent` or `changing` ID. As such, this field might not be set. We recommend you take care to always use the same PDF.

#### skippedPdfObjectIds

This is an array of PDF object IDs that will be ignored when importing annotations from the original PDF document. If this array is empty, the key should not be set.

#### annotations

This is a list of new or updated annotations. Annotations follow the [format for Instant JSON for annotations][]. When an annotation contains a `pdfObjectId`, it is considered to be an update to one of the annotations of the original PDF. For newly created annotations, this key will not be set.

#### formFieldValues

This is a list of modified form field values. Objects follow the [Instant form field value JSON format][]. This list will not be preset when no form field values have been modified.

<% if ios? %>

## Instant Annotation JSON API

Annotation JSON is Instant’s representation of a single annotation. This can be generated by using the methods available in [`PSPDFAnnotation`][pspdfannotation]. For generation, use [`-[PSPDFAnnotation generateInstantJSONWithError:]`][instant-annotation-json-generate]:

[==

```swift
let annotation = ...
let instantJSONData = try? annotation.generateInstantJSON()

// The annotation's Instant JSON data can be saved to an external file.
```

```objc
PSPDFAnnotation *annotation = ...
NSError *instantJSONGenerationError;
NSData *instantJSON = [annotation generateInstantJSONWithError:&instantJSONGenerationError];
if (!instantJSON) {
    // Handle error.
}

// The annotation's Instant JSON data can be saved to an external file.
```

==]

**ℹ️ Note:** When working with documents that have multiple document providers, the value of `pageIndex` when creating an annotation JSON from an annotation is always relative to its own document provider and not the entire document.

For creating an annotation from the JSON, use [`-[PSPDFAnnotation annotationFromInstantJSON:documentProvider:error:]`][instant-annotation-json-create], like so:

[==

```swift
// Load the document.
let document = ...
let loadedInstantJSONData = ... // The Instant JSON data can be loaded from an external file.

let documentProvider = document.documentProviders.first!
// Create an annotation from Instant JSON data.
let annotation = try! PSPDFAnnotation(fromInstantJSON: loadedInstantJSONData, documentProvider: documentProvider)

// Add the newly created annotation to the document.
document.add([annotation])
```

```objc
// Load the document.
PSPDFDocument *document = ...
NSData *loadedInstantJSONData = ... // The Instant JSON data can be loaded from an external file.

// Create an annotation from Instant JSON data.
NSError *annotationCreationError;
PSPDFAnnotation *annotation = [PSPDFAnnotation annotationFromInstantJSON:loadedInstantJSONData documentProvider:document.documentProviders.firstObject error:&annotationCreationError];
if (!annotation) {
    // Handle error.
}

// Add the newly created annotation to the document.
[document addAnnotations:@[annotation] options:nil];
```

==]

There are some limitations with Instant JSON, in that not _all_ annotation types are currently supported, and only the properties that can be handled correctly across all of PSPDFKit’s supported platforms (iOS, Android, and Web) are serialized. For more information, check out the detailed [JSON Format][] guide article and the Instant JSON — Annotation example from `InstantJSON.swift` in PSPDFCatalog.

<% end %>
<% if android? %>

## Instant Annotation JSON API

Annotation JSON is Instant’s representation of a single annotation. To serialize an [`Annotation`] to its JSON representation, you can call [`annotation.toInstantJson()`][`annotation#toinstantjson()`]. For example:

[==

```kotlin
// Serializes a single annotation to a JSON string.
val json: String = annotation.toInstantJson()
```

```java
// Serializes a single annotation to a JSON string.
final String json = annotation.toInstantJson();
```

==]

To create an annotation from an existing Instant annotation JSON, use [`createAnnotationFromInstantJson()`][`annotationprovider#createannotationfrominstantjson()`] from your document’s [`AnnotationProvider`]. For example:

[==

```kotlin
// Deserialize an Instant annotation JSON and create an annotation from it.
val annotation: Annotation = document
    .getAnnotationProvider()
    .createAnnotationFromInstantJson(json)
```

```java
// Deserialize an Instant annotation JSON and create an annotation from it.
final Annotation annotation = document
    .getAnnotationProvider()
    .createAnnotationFromInstantJson(json);
```

==]

> **ℹ️ Note:** The created [`Annotation`] will automatically be added to the [`PdfDocument`] of the used [`AnnotationProvider`] during deserialization.

There are some limitations with Instant JSON, in that not _all_ annotation types are currently supported, and only the properties that can be handled correctly across all of PSPDFKit’s supported platforms (iOS, Android, and Web) are serialized. For more information, check out the detailed [JSON Format][] guide article.

<% end %>
<% if web? %>

## Instant Annotation JSON API

Annotation JSON is Instant’s representation of a single annotation. This can be generated by using the methods available in [`PSPDFKit.Annotations`][]. For generating an object in this JSON format, use [`PSPDFKit.Annotations.toSerializableObject()`][]:

[==

```es
const { InkAnnotation, toSerializableObject } = PSPDFKit.Annotations;

const annotation = new InkAnnotation();
const serializedObject = toSerializableObject(annotation);
const json = JSON.stringify(serializedObject);

// The annotation's Instant JSON data can be saved to an external file.
```

```js
var annotation = new PSPDFKit.Annotations.InkAnnotation();
var serializedObject = PSPDFKit.Annotations.toSerializableObject(annotation);
var json = JSON.stringify(serializedObject);

// The annotation's Instant JSON data can be saved to an external file.
```

==]

For creating an annotation from the JSON, use [`PSPDFKit.Annotations.fromSerializableObject()`](/api/web/PSPDFKit.Annotations.html#.fromSerializableObject), like so:

[==

```es
const { fromSerializableObject } = PSPDFKit.Annotations;

const json = "{...}";
const serializedObject = JSON.parse(json);
const annotation = fromSerializableObject(serializedObject);

// Add the newly created annotation to the document.
instance.createAnnotation(annotation);
```

```js
var json = "{...}";
var serializedObject = JSON.parse(json);
var annotation = PSPDFKit.Annotations.fromSerializableObject(serializedObject);

// Add the newly created annotation to the document.
instance.createAnnotation(annotation);
```

==]

There are some limitations with Instant JSON, in that not _all_ annotation types are currently supported, and only the properties that can be handled correctly across all of PSPDFKit’s supported platforms (iOS, Android, and Web) are serialized. For more information, check out the detailed [JSON Format][] guide article.

<% end %>
<% if server? %>

<% end %>

<% if windows? %>

## Instant Annotation JSON API

Annotation JSON is Instant’s representation of a single annotation. This can be generated using the [`PSPDFKit.Pdf.Annotation.ToJson`][annotation-to-json] method available in each annotation:

```csharp
var textAnnot ... // Get the annotation from the document or from another source.
var textAnnotJson = textAnnot.ToJson();
```

For creating an annotation from the JSON, use [`PSPDFKit.Pdf.Annotation.Factory.FromJson`][instant-annotation-json-create], like so:

```csharp
var fromJsonAnnotation = Factory.FromJson(textAnnotJson);

// Create the annotation parsed from JSON.
await pdfView.Document.CreateAnnotationAsync(fromJsonAnnotation);
```

There are some limitations with Instant JSON, in that not _all_ annotation types are currently supported, and only the properties that can be handled correctly across all of PSPDFKit’s supported platforms (iOS, Android, and Web) are serialized. For more information, check out the detailed [JSON Format][] guide article and the Instant JSON — Annotation example from `InstantJSON.swift` in PSPDFCatalog.
<% end %>
<% if dotnet? %>

## Instant Annotation JSON API

Annotation JSON is Instant’s representation of a single annotation. A JSON array of annotations can be generated using the [`GetAnnotationsJson`][`annotationprovider#getannotationsjson`] method:

```csharp
JSONArray jsonArray = document.GetAnnotationProvider().GetAnnotationsJson(0);
```

For creating an annotation from Instant Annotation JSON, use [`AddAnnotationJson`][`annotationprovider#addannotationjson`], like so:

```csharp
document.GetAnnotationProvider().AddAnnotationJson(annotationJson);
```

There are some limitations with Instant JSON, in that not _all_ annotation types are currently supported, and only the properties that can be handled correctly across all of PSPDFKit’s supported platforms (iOS, Android, and Web) are serialized. For more information, check out the detailed [JSON Format][] guide article.
<% end %>
<% if java? %>

## Instant Annotation JSON API

Annotation JSON is Instant’s representation of a single annotation. A JSON array of annotations can be generated using the [`getAnnotationsJson`][`annotationprovider#getannotationsjson`] method:

```java
JSONArray annotations = document.getAnnotationProvider().getAnnotationsJson(0);
```

For creating an annotation from Instant Annotation JSON, use [`addAnnotationJson`][`annotationprovider#addannotationjson`], like so:

```java
document.getAnnotationProvider().addAnnotationJson(DocumentHelper.getJsonAnnotation());
```

There are some limitations with Instant JSON, in that not _all_ annotation types are currently supported, and only the properties that can be handled correctly across all of PSPDFKit’s supported platforms (iOS, Android, and Web) are serialized. For more information, check out the detailed [JSON Format][] guide article.
<% end %>
<% if !server? %>

Here’s an Instant JSON sample payload for an ink annotation:

```json
{
  "v": 1,
  "type": "pspdfkit/ink",
  "bbox": [89, 98, 143, 207],
  "blendMode": "normal",
  "createdAt": "2018-07-03T13:53:03Z",
  "isDrawnNaturally": false,
  "lineWidth": 5,
  "lines": {
    "intensities": [[0.5, 0.5, 0.5], [0.5, 0.5, 0.5]],
    "points": [
      [[92, 101], [92, 202], [138, 303]],
      [[184, 101], [184, 202], [230, 303]]
    ]
  },
  "opacity": 1,
  "pageIndex": 0,
  "strokeColor": "#AA47BE",
  "updatedAt": "2018-07-03T13:53:03Z"
}
```

<% end %>
<% if ios? %>

## Instant Document JSON API

Document JSON is a serializable representation of the current changes to a document, i.e. a diff between the [`PSPDFDocument`][pspdfdocument]’s saved and unsaved changes. This can be used to transfer a set of changes across devices without having to send the entire PDF, which could potentially be very large. [PSPDFKit for Web][] uses this in standalone deployment to reduce bandwidth usage. Currently, the generated JSON only contains changes to annotations.

To generate Instant JSON for documents, simply call [`-[PSPDFDocument generateInstantJSONFromDocumentProvider:error:]`][document-json-generate] on the document from which you wish to retrieve currently unsaved changes in JSON form. Note that this method will return `nil` if there are no unsaved changes in the document:

[==

```swift
let data = try? document.generateInstantJSON(from: document.documentProviders.first)
```

```objc
NSError *error;
NSData *data = [document generateInstantJSONFromDocumentProvider:document.documentProviders.firstObject error:&error];
if (!data) {
  // Handle error.
}
```

==]

This generated JSON can then be applied to a document using [`-[PSPDFDocument applyInstantJSONFromDataProvider:toDocumentProvider:lenient:error:]`][document-json-apply]. If you have an `NSData` object containing the Document JSON data, create a [`PSPDFDataContainerProvider`][data-container-provider] and pass that as the `dataProvider` argument to the method, like this:

[==

```swift
let document = ...
let jsonContainer = PSPDFDataContainerProvider(data:data!)
try! document.applyInstantJSON(fromDataProvider: jsonContainer, to: document.documentProviders.first, lenient: false)
```

```objc
PSPDFDocument *document = ...
PSPDFDataContainerProvider *jsonContainer = [[PSPDFDataContainerProvider alloc] initWithData:data];
NSError *error;
BOOL success = [document applyInstantJSONFromDataProvider:jsonContainer toDocumentProvider:document.documentProviders.firstObject lenient:NO error:&error];
if (!success) {
    // Handle error.
}
```

==]

For more details, see the Instant JSON — Document example from `InstantJSON.swift` in PSPDFCatalog.
<% end %>
<% if android? %>

## Instant Document JSON API

Document JSON is a serializable representation of the current changes to a document, i.e. a diff between the [`PdfDocument`]’s saved and unsaved changes. This can be used to transfer a set of changes across devices without having to send the entire PDF, which could potentially be very large. [PSPDFKit for Web][] uses this in standalone deployment to reduce bandwidth usage. Currently, the generated JSON only contains changes to annotations.

To generate Instant JSON for documents, use the static [`exportDocumentJson()`][`documentjsonformatter#exportdocumentjson()`] or [`exportDocumentJsonAsync()`][`documentjsonformatter#exportdocumentjsonasync()`] of the [`DocumentJsonFormatter`] class. Pass in the document from which you wish to retrieve currently unsaved changes in JSON form, as well as an [`OutputStream`] that will receive the JSON string. For example:

[==

```kotlin
val outputStream = ByteArrayOutputStream()
DocumentJsonFormatter.exportDocumentJson(document, outputStream)
val jsonString = outputStream.toString()
```

```java
final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
DocumentJsonFormatter.exportDocumentJson(document, outputStream);
final String jsonString = outputStream.toString();
```

==]

**⚠️ Warning:** Exporting a document to JSON takes some time, which depends upon the device and the number of changes. In order to keep your UI thread responsive, consider using [`exportDocumentJsonAsync()`][`documentjsonformatter#exportdocumentjsonasync()`] when starting the JSON export from the main thread.

### Applying Document JSON to a Document

An existing Document JSON can be applied to a document by calling [`importDocumentJson()`][`documentjsonformatter#importdocumentjson()`] or [`importDocumentJsonAsync()`][`documentjsonformatter#importdocumentjsonasync()`] of the [`DocumentJsonFormatter`] class. Pass in a [`DataProvider`] serving the Document JSON data, as well as a [`PdfDocument`] instance into which the changes of the JSON should be imported. For example:

[==

```kotlin
// You can use any `DataProvider` instance to serve your JSON data.
val dataProvider = DocumentJsonDataProvider()
DocumentJsonFormatter.importDocumentJson(document, dataProvider)
```

```java
// You can use any `DataProvider` instance to serve your JSON data.
final DataProvider dataProvider = new DocumentJsonDataProvider();
DocumentJsonFormatter.importDocumentJson(document, dataProvider);
```

==]

**💡 Tip:** The `DocumentJsonDataProvider` is a simple example data provider as implemented in the `DataProviderExample` of our Catalog app. Our [Data Providers][] guide describes everything you need to know about data providers.
<% end %>
<% if web? %>

## Instant Document JSON API

### Exporting

[==

```es
instance.exportInstantJSON().then(instantJSON => {
  console.log(instantJSON); // => { format: "https://pspdfkit.com/instant-json/v1", ...}
});
```

```js
instance.exportInstantJSON().then(function(instantJSON) {
  console.log(instantJSON); // => { format: "https://pspdfkit.com/instant-json/v1", ...}
});
```

==]

Instant JSON works seamlessly with the [annotation API][]. If you want to persist annotations
whenever changes are made, we recommend that you use the [`annotations.didSave`][] event. This event will be triggered automatically and can be configured via [`Configuration#autoSaveMode`][].

**Note for standalone users:** Instead of saving annotations to the backend, a save operation will persist the annotations in memory until they are either exported via [`Instance#exportInstantJSON`][] or written to the PDF document when you export it using
[`Instance#exportPDF`][]. Unsaved annotations will not be exported to reflect the server behavior:

[==

```es
instance.addEventListener("annotations.didSave", async () => {
  const instantJSON = await instance.exportInstantJSON();
  await fetch("https://your-server.com/instant-json", {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify(instantJSON)
  });
});
```

```js
instance.addEventListener("annotations.didSave", function() {
  instance.exportInstantJSON().then(function(instantJSON) {
    fetch("https://your-server.com/instant-json", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(instantJSON)
    });
  });
});
```

==]

### Standalone Importing

When opening a document with Instant JSON using our standalone setup, make sure you always use the same unmodified PDF that was used to create that Instant JSON:

[==

```es
PSPDFKit.load({
  pdf: "https://your-server.com/some/document.pdf",
  instantJSON: {
    format: "https://pspdfkit.com/instant-json/v1",
    annotations: [
      { id: "01BS964AM5Z01J9MKBK64F22BQ", type: "pspdfkit/text", ...}
    ],
  },
})
```

```js
PSPDFKit.load({
  pdf: "https://your-server.com/some/document.pdf",
  instantJSON: {
    format: "https://pspdfkit.com/instant-json/v1",
    annotations: [
      { id: "01BS964AM5Z01J9MKBK64F22BQ", type: "pspdfkit/text", ...}
    ],
  },
})
```

==]

### Server Importing

When you upload a new document to PSPDFKit Server, you can include an Instant JSON document as a second file in the upload. Follow the [server guides][] for an in-depth example.
<% end %>
<% if server? %>

## Instant Document JSON API

## Exporting Instant JSON

You can export the current annotations of a document as an Instant JSON file via a `GET` request to `/api/documents/:document_id/document.json`. To get the current annotation of a layer, send a `GET` request to `/api/documents/:document_id/layers/:layer_name/document.json`:

**Request**

```
GET /api/documents/:document_id/document.json
Authorization: Token token="<secret token>"
```

```curl
$ curl "http://localhost:5000/api/documents/abc/document.json" \
   -H "Authorization: Token token=<secret token>"
```

**Response**

```
HTTP/1.1 200 OK
Content-Type: application/json

<JSON data>
```

## Importing Instant JSON

PSPDFKit Server supports importing annotations from an Instant JSON file when uploading a document via the `/api/documents` endpoint. Send a `multipart/form-data` `POST` request, including the PDF and the Instant JSON file, to import the annotations in the given PDF file. This will replace all existing annotations in the uploaded PDF with the annotations from the uploaded Instant JSON file. If you want to add annotations to already existing ones instead of replacing them, you can set `keep_current_annotations` to `true`:

**Request**

```
POST /api/documents
Content-Type: multipart/form-data; boundary=customboundary
Authorization: Token token="<secret token>"

--customboundary
Content-Disposition: form-data; name="file"; filename="Example Document.pdf"
Content-Type: application/pdf

<PDF data>
--customboundary
Content-Disposition: form-data; name="attachment"; filename="attachment.json"
Content-Type: application/json

<annotations data>
--customboundary
```

## Importing Instant JSON on Existing Documents

PSPDFKit Server supports importing annotations from an Instant JSON file on an existing document via two different endpoints:

- [`POST /pdf_with_instant_json`][] receives an `instant.json` file and responds with the resulting PDF of the document/layer and the imported `instant.json`.
- [`POST /copy_with_instant_json`][] can optionally receive an `instant.json` file and will persist the resulting PDF of the document/layer and the imported `instant.json` file as a new document. The JSON response will include the `document_id` of the document.

<% end %>
<% if windows? %>

## Instant Document JSON API

Document JSON is a serializable representation of the current changes to a document, i.e. a diff between the document’s saved and unsaved changes. This can be used to transfer a set of changes across devices without having to send the entire PDF, which could potentially be very large. [PSPDFKit for Web][] uses this in standalone deployment to reduce bandwidth usage.

To generate Instant Document JSON, simply call [`PSPDFKit.Document.ExportInstantJsonAsync`][document-json-generate] on the document from which you wish to retrieve currently unsaved changes in JSON form:

```csharp
var instantJson = await pdfView.Document.ExportInstantJsonAsync();
```

This generated JSON can then be applied to a document using [`PSPDFKit.Document.ImportInstantJsonAsync`][document-json-apply]:

```csharp
try
{
    await pdfView.Document.ImportInstantJsonAsync(instantJson);
}
catch (Exception e)
{
    Debug.WriteLine(e);
}
```

If the imported data is malformed, applied to the incorrect document, or has no data, an exception will be thrown. The document will then be reloaded with the JSON data applied.

<% end %>
<% if dotnet? %>
Document JSON is a serializable representation of the current changes to a document, i.e. a diff between the document’s saved and unsaved changes. This can be used to transfer a set of changes across devices without having to send the entire PDF, which could potentially be very large. [PSPDFKit for Web][] uses this in standalone deployment to reduce bandwidth usage.

To generate Instant Document JSON, use [`ExportDocumentJson`][`document#exportdocumentjson`], which will take an [`IWriteableDataProvider`][`iwriteabledataprovider`] to write the JSON to. For example:

```csharp
const string filename = "outputInstantJson.json";
File.Create(filename);
document.ExportDocumentJson(new FileDataProvider(filename));
```

This generated JSON can then be applied to a document using [`ImportDocumentJson`][`document#importdocumentjson`]:

```csharp
document.ImportDocumentJson(new FileDataProvider("Assets/instant.json"));
```

If the imported data is malformed, applied to the incorrect document, or has no data, an exception will be thrown.
<% end %>
<% if java? %>
Document JSON is a serializable representation of the current changes to a document, i.e. a diff between the document’s saved and unsaved changes. This can be used to transfer a set of changes across devices without having to send the entire PDF, which could potentially be very large. [PSPDFKit for Web][] uses this in standalone deployment to reduce bandwidth usage.

To generate Instant Document JSON, use [`exportDocumentJson`][`pdfdocument#exportdocumentjson`], which will take a [`WriteableDataProvider`][`writeabledataprovider`] to write the JSON to. For example:

```java
File file = File.createTempFile("outputInstantJson", ".json");
document.exportDocumentJson(new FileDataProvider(file));
```

This generated JSON can then be applied to a document using [`importDocumentJson`][`pdfdocument#importdocumentjson`]:

```java
File file = new File("Assets/instant.json");
document.importDocumentJson(new FileDataProvider(file));
```

If the imported data is malformed, applied to the incorrect document, or has no data, an exception will be thrown.

<% end %>

Here’s an Instant JSON sample payload for a document with an ink annotation:

```json
{
  "annotations": [
    {
      "v": 1,
      "type": "pspdfkit/ink",
      "id": "01CHG7QMTDT1JFYQ8BSKGT6F3P",
      "bbox": [97.5, 97.5, 155, 205],
      "blendMode": "normal",
      "createdAt": "2018-07-03T14:11:21Z",
      "creatorName": "John Appleseed",
      "isDrawnNaturally": false,
      "lineWidth": 5,
      "lines": {
        "intensities": [[0.5, 0.5, 0.5], [0.5, 0.5, 0.5]],
        "points": [
          [[100, 100], [100, 200], [150, 300]],
          [[200, 100], [200, 200], [250, 300]]
        ]
      },
      "name": "A167811E-6D10-4546-A147-B7AD775FE8AC",
      "note": "",
      "opacity": 1,
      "pageIndex": 0,
      "strokeColor": "#AA47BE",
      "updatedAt": "2018-07-03T14:11:21Z"
    }
  ],
  "format": "https://pspdfkit.com/instant-json/v1",
  "pdfId": {
    "changing": "wljL9fB/TPOAuGjHAsAsHg==",
    "permanent": "qTwUmg5VSm6ysfzcPlFvnQ=="
  },
  "skippedPdfObjectIds": [557]
}
```

<% if ios? %>

## Instant JSON Annotation Attachment API

### Writing

You can export Instant JSON binary for a stamp annotation as `NSData` and persist it to an external file using [`-[PSPDFAnnotation writeBinaryInstantJSONAttachmentToDataSink:error:]`][instant-annotation-json-write-binary], like this:

[==

```swift
let stampAnnotation = ...
let dataSink = PSPDFDataContainerSink(data: nil)
var contentType: String?
if stampAnnotation.hasBinaryInstantJSONAttachment {
    contentType = try! stampAnnotation.writeBinaryInstantJSONAttachment(to: dataSink)
}

// Persist the data sink's data and the content type onto an external file so it can be attached later.
```

```objc
PSPDFStampAnnotation *stampAnnotation = ...
PSPDFDataContainerSink dataSink = [[PSPDFDataContainerSink alloc] initWithData:nil];
NSError *error;
NSString *contentType;

if (stampAnnotation.hasBinaryInstantJSONAttachment){
    contentType = [stampAnnotation writeBinaryInstantJSONAttachmentToDataSink:dataSink error:&error];
    if (!contentType) {
    	// Handle error.
        return;
    }
}

// Persist the data sink's data and the content type onto an external file so it can be attached later.
```

==]

### Attaching

You can import and attach the Instant JSON binary attachment data for a stamp annotation from an external file using [`-[PSPDFAnnotation attachBinaryInstantJSONAttachmentFromDataProvider:error:]`][instant-annotation-json-attach-binary], like so:

[==

```swift
// Load the document.
let document = ...
let instantJSONData = ... // The Instant JSON data can be loaded from an external file.
let attachmentData = ... // The Instant JSON binary attachment data can be loaded from an external file.
let contentType = ... // The content type can be loaded from an external file.

// Create the data container provider using the attachment data.
let dataContainerProvider = PSPDFDataContainerProvider(data: attachmentData)
let documentProvider = document.documentProviders.first!

// Create an annotation from Instant JSON data.
let stampAnnotation = try! PSPDFAnnotation(fromInstantJSON: instantJSONData!, documentProvider: documentProvider)
// Attach the attachment data.
try! stampAnnotation.attachBinaryInstantJSONAttachment(fromDataProvider: dataContainerProvider)

// Add the newly loaded annotation to the document.
document.add([stampAnnotation])
```

```objc
// Load the document.
PSPDFDocument *document = ...
NSData *instantJSONData = ... // The Instant JSON data can be loaded from an external file.
NSData *attachmentData = ... // The Instant JSON binary attachment data can be loaded from an external file.
NSString *contentType = ... // The content type can be loaded from an external file.

// Create an annotation from Instant JSON data.
NSError *annotationCreationError;
PSPDFAnnotation *stampAnnotation = [PSPDFAnnotation annotationFromInstantJSON:instantJSONData documentProvider:document.documentProviders.firstObject error:&annotationCreationError];
if (!stampAnnotation) {
    // Handle error.
}

// Create the data container provider using the attachment data.
PSPDFDataContainerProvider *dataContainerProvider = [[PSPDFDataContainerProvider alloc] initWithData:attachmentData];

// Attach the attachment data.
NSError *attachBinaryError;
BOOL success = [stampAnnotation attachBinaryInstantJSONAttachmentFromDataProvider:dataContainerProvider error:&attachBinaryError];
if (!success) {
    // Handle error.
}

// Add the newly loaded annotation to the document.
[document addAnnotations:@[stampAnnotation] options:nil];
```

==]

For more details, please take a look at the Instant JSON — Attachment example from `InstantJSON.swift` in PSPDFCatalog.

<% end %>

[ulid]: https://github.com/alizain/ulid/
[flow type declarations]: https://flowtype.org/docs/declarations.html
[format for instant json for annotations]: https://pspdfkit.com/guides/server/current/api/json-format/
[json format]: https://pspdfkit.com/guides/server/current/api/json-format/
[annotation json]: https://pspdfkit.com/guides/server/current/api/json-format
[annotation api]: ../../annotations/introduction-to-annotations
[instant form field value json format]: https://pspdfkit.com/guides/server/current/api/json-format/#form-field-values
[pspdfkit for web]: https://pspdfkit.com/pdf-sdk/web/

<% if ios? %>
[PSPDFAnnotation]: https://pspdfkit.com/api/ios/Classes/PSPDFAnnotation.html
[instant-annotation-json-generate]: https://pspdfkit.com/api/ios/Classes/PSPDFAnnotation.html#/c:objc(cs)PSPDFAnnotation(cm)annotationFromInstantJSON:documentProvider:error:
[instant-annotation-json-create]: https://pspdfkit.com/api/ios/Classes/PSPDFAnnotation.html#/c:objc(cs)PSPDFAnnotation(im)generateInstantJSONWithError:
[instant-annotation-json-write-binary]: https://pspdfkit.com/api/ios/Classes/PSPDFAnnotation.html#/c:objc(cs)PSPDFAnnotation(im)writeBinaryInstantJSONAttachmentToDataSink:error:
[instant-annotation-json-attach-binary]: https://pspdfkit.com/api/ios/Classes/PSPDFAnnotation.html#/c:objc(cs)PSPDFAnnotation(im)attachBinaryInstantJSONAttachmentFromDataProvider:error:
[PSPDFDocument]: https://pspdfkit.com/api/ios/Classes/PSPDFDocument.html
[document-json-generate]: https://pspdfkit.com/api/ios/Classes/PSPDFDocument.html#/c:objc(cs)PSPDFDocument(im)generateInstantJSONFromDocumentProvider:error:
[document-json-apply]: https://pspdfkit.com/api/ios/Classes/PSPDFDocument.html#/c:objc(cs)PSPDFDocument(im)applyInstantJSONFromDataProvider:toDocumentProvider:lenient:error:
[data-container-provider]: https://pspdfkit.com/api/ios/Classes/PSPDFDataContainerProvider.html
[`Instance#exportInstantJSON`]: https://pspdfkit.com/api/web/PSPDFKit.Instance.html#exportInstantJSON
[`Instance#exportPDF`]: https://pspdfkit.com/api/web/PSPDFKit.Instance.html#exportPDF
[`annotations.didSave`]: https://pspdfkit.com/api/web/PSPDFKit.Instance.html#~AnnotationsDidSaveEvent
[`Configuration#autoSaveMode`]: ../../annotations/annotation-saving-mechanism/
<% end %>
<% if android? %>
[Instant Annotation JSON format]: https://pspdfkit.com/guides/server/current/api/json-format/
[Data Providers]: ../../features/data-providers/
<% end %>
<% if web? %>
[`Instance#exportInstantJSON`]: https://pspdfkit.com/api/web/PSPDFKit.Instance.html#exportInstantJSON
[`Instance#exportPDF`]: https://pspdfkit.com/api/web/PSPDFKit.Instance.html#exportPDF
[`annotations.didSave`]: https://pspdfkit.com/api/web/PSPDFKit.Instance.html#~AnnotationsDidSaveEvent
[`Configuration#autoSaveMode`]: ../../annotations/annotation-saving-mechanism/
[Instant Annotation JSON format]: https://pspdfkit.com/guides/server/current/api/json-format/
[`PSPDFKit.Annotations`]: /api/web/PSPDFKit.Annotations.html
[`PSPDFKit.Annotations.toSerializableObject()`]: /api/web/PSPDFKit.Annotations.html#.toSerializableObject
[Data Providers]: ../../features/data-providers/
[server guides]: https://pspdfkit.com/guides/server/current/importing-exporting/instant-json/#importing-instant-json
<% end %>
<% if server? %>
[`POST /pdf_with_instant_json`]: /guides/server/current/api/documents/#import-instant-json-and-download-resulting-pdf-file
[`POST /copy_with_instant_json`]: /guides/server/current/api/documents/#import-instant-json-and-persist-resulting-pdf-file
<% end %>
<% if windows? %>
[document-json-generate]: https://pspdfkit.com/api/windows/PSPDFKit/PSPDFKit.Pdf.Document.html#PSPDFKit_Pdf_Document_ExportInstantJsonAsync
[document-json-apply]: https://pspdfkit.com/api/windows/PSPDFKit/PSPDFKit.Pdf.Document.html#PSPDFKit_Pdf_Document_ImportInstantJsonAsync_Windows_Data_Json_JsonObject_
[annotation-to-json]: https://pspdfkit.com/api/windows/PSPDFKit/PSPDFKit.Pdf.Annotation.IAnnotation.html#PSPDFKit_Pdf_Annotation_IAnnotation_ToJson
[instant-annotation-json-create]: https://pspdfkit.com/api/windows/PSPDFKit/PSPDFKit.Pdf.Annotation.Factory.html#PSPDFKit_Pdf_Annotation_Factory_FromJson_Windows_Data_Json_JsonObject_
<% end %>
<% if dotnet? %>
[`annotationprovider#getannotationsjson`]: /api/dotnet/PSPDFKit/PSPDFKit.Annotations.AnnotationProvider.html#PSPDFKit*Annotations_AnnotationProvider_GetAnnotationsJson_System_UInt32*
[`document#exportdocumentjson`]: /api/dotnet/PSPDFKit/PSPDFKit.Document.html#PSPDFKit*Document_ExportDocumentJson_PSPDFKit_Providers_IWritableDataProvider*
[`iwriteabledataprovider`]: /api/dotnet/PSPDFKit/PSPDFKit.Providers.IWritableDataProvider.html
[`document#importdocumentjson`]: /api/dotnet/PSPDFKit/PSPDFKit.Document.html#PSPDFKit*Document_ImportDocumentJson_PSPDFKit_Providers_IDataProvider*
[`annotationprovider#addannotationjson`]: /api/dotnet/PSPDFKit/PSPDFKit.Annotations.AnnotationProvider.html#PSPDFKit*Annotations_AnnotationProvider_AddAnnotationJson_JToken*
<% end %>
<% if java? %>
[`pdfdocument#exportdocumentjson`]: /api/java/reference/com/pspdfkit/api/PdfDocument.html#exportDocumentJson(com.pspdfkit.api.providers.WritableDataProvider)
[`writeabledataprovider`]: /api/java/reference/com/pspdfkit/api/providers/WritableDataProvider.html
[`pdfdocument#importdocumentjson`]: /api/java/reference/com/pspdfkit/api/PdfDocument.html#importDocumentJson(com.pspdfkit.api.providers.DataProvider)
[`annotationprovider#getAnnotationsjson`]: /api/java/reference/com/pspdfkit/api/annotations/AnnotationProvider.html#getAnnotationsJson(int)
[`annotationprovider#addannotationjson`]: /api/java/reference/com/pspdfkit/api/annotations/AnnotationProvider.html#addAnnotationJson(org.json.JSONObject)
<% end %>
