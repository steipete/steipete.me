---
title: Third-Party Compatibility
section: developers
---

PSPDFKit writes annotations in accordance with the [standardized ISO 32000-1:2008 PDF specification][]. **Any ISO-compliant viewer (like Adobe Acrobat) will be able to display and edit such annotations and forms.** In using standard compliant software, annotations can, for example, be created using PSPDFKit for iOS, edited in Adobe Acrobat for Windows, and later displayed and edited/deleted on PSPDFKit for Web or Android. Our shared core ensures that annotations created with PSPDFKit SDKs from multiple platforms are especially compatible and render similarly. (However, some icons, like Notes, have been tweaked to better match the respective platforms.)

You can evaluate our compatibility via the free [PDF Viewer][] apps for iOS and Android and our [PSPDFKit for Web][] demo instance. The default viewers that ship with operating systems are not always as capable.

## Apple macOS High Sierra/Sierra (Safari/Preview/Quick Look)

Apple uses [a custom PDF renderer (CGPDF) that is part of Core Graphics][apple guide drawing pdf pages]. It’s quite capable, but it is known to [crash][open radar crash]/[freeze][open radar freeze] or [not show content][open radar doesn’t show content] on [several][open radar content] files or certain [API call combinations][open radar api call combinations]. Most of these radars are unresolved to this day. As of PSPDFKit 5 for iOS, we switched to a custom renderer because of these issues, and because [Apple’s focus is clearly not on improving its PDF rendering engine][twitter steipete apple tweet].

However, the above issues are edge cases. Most documents render correctly or well enough to be usable. Annotations are a different story. While — as long as an appearance stream is emitted — most annotations render correctly, there are issues related to rotated documents. Preview does not correctly handle editing documents containing stamp annotations, which results in stamps appearing differently or not at all when the document is opened again in Preview or any other PDF reader. Preview sometimes gets things right where Quick Look fails — Apple seems to have both two different teams working on these features and not much shared code, which results in different bugs for different features. Editing forms partly works in Preview, whereas saving a document often destroys a lot of metadata or the form itself.

## iOS 11

Apple improved PDF support in iOS 11 with the introduction of PDFKit, which has existed on macOS since 10.4. We offer a [migration guide for moving from PDFKit to PSPDFKit][pdfkit migration guide], and this guide explains some of the differences. iOS 11 extends annotation support and is able to display the most commonly used annotations (highlight, ink, free text). There are still significant bugs and issues in which annotations are not displayed, are mirrored, or are positioned incorrectly. iOS 11 also allows annotating PDF documents, but this component is not accessible to apps and can only be invoked from the system directly. These annotations are partly standard compliant but include Apple-specific additions. Displaying them in other viewers works correctly, but editing them will remove any Apple-specific additions.

## iOS 10/9 (Safari, Quick Look, Apps Not Using PSPDFKit)

iOS has had a native PDF renderer since iOS 2. The renderer is shared with the Mac, though there are often different bugs based on the different internal versions and architecture. The renderer is reasonably fast. [Apple announced support for PDF annotations in iOS 7 at WWDC][macworld article wwdc pdf annotations in ios 7], but this never really worked, and Apple stopped mentioning this feature. In practice, this means that most annotations do not work or are not displayed at all. The custom annotation support is also part of an internal framework called CorePDF, which is used as part of Quick Look and Safari. It allows vertical scrolling and text selection. However, there’s no way to customize anything, use custom encryption, or draw on pages — you can’t even preselect a page. It makes for a very basic reading experience.

Third-party apps can either use Quick Look or go down to the C level and use [`CGContextDrawPDFPage`][] to draw into a memory buffer/image. Building a viewer from scratch is very time-consuming, and it’s hard to get the details right. Many apps choose the PSPDFKit SDK to get the best of both worlds: a friendly, customizable framework that fully fits into applications, and a framework that is fast and allows both annotations and forms to be created/filled out.

### Popular Third-Party Apps with Annotation Support on iOS

Popular third-party apps on iOS are [PDF Viewer][], [Adobe Acrobat Reader][], [PDF Expert][], [iAnnotate][], [GoodReader][], [Tiny PDF][], and [PDF Box][].

PDF Viewer, Tiny PDF, and PDF Box use PSPDFKit for rendering and editing annotations. There are [many other popular iOS apps that use PSPDFKit][pspdfkit apps using pspdfkit]. However, based on NDA restrictions, we cannot list all of them. You’ll usually notice our iconic annotation toolbar and the bottom scrubber bar as the typical polished PSPDFKit experience.

### Annotation Replies

Annotation replies are a feature of PDF documents, and they enable users to have written discussions directly inside a document. See the [Replies article][] for further details on third-party compatibility.

### Android

Google added [basic PDF rendering support][android api pdfrenderer] to Android as of API level 21 (Android 5.0 Lollipop). This is mostly meant for printing and is far more limited than the already very limited PDF support in iOS. This API cannot be used to extract critical information like PDF links, annotations, bookmarks, page labels, or any other metadata, and thus is not complete enough to build a great PDF experience with. (However, it’s good enough for printing, which was Google’s entire motivation for adding it.)

Since Android didn’t have a native renderer for a long time, and since the current one is still very limited, there are a number of third-party frameworks. Note that many of them are GPL-licensed, which would force you to open source your entire application if you use them. Examples of these are [MuPDF][]/[VuDroid][]/[apv][]/[apdfviewer][], [Poppler][], and [iText][]. If you choose PSPDFKit for Android, you get a commercial license that does not have any of the (A)GPL drawbacks.

### Popular Third-Party Apps with Annotation Support on Android

Popular third-party apps on Android are [Adobe Acrobat][] and [Google PDF Viewer][] (very basic). The ecosystem here is not as good yet, so we can’t recommend many apps.

### Google Chrome (Desktop)

Google Chrome has used its own PDF renderer since version 6. It has been improved upon over time and can render annotations and forms. This viewer is used across Windows, Mac, and Linux.

[standardized iso 32000-1:2008 pdf specification]: http://www.adobe.com/devnet/pdf/pdf_reference.html
[apple guide drawing pdf pages]: https://developer.apple.com/library/ios/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GeneratingPDF/GeneratingPDF.html#//apple_ref/doc/uid/TP40010156-CH10-SW5
[open radar crash]: http://www.openradar.me/radar?id=6386544763994112
[open radar freeze]: http://www.openradar.me/19865091
[open radar doesn’t show content]: http://www.openradar.me/radar?id=5294422090579968
[open radar content]: http://www.openradar.me/radar?id=5859466645864448
[open radar api call combinations]: http://www.openradar.me/19073954
[twitter steipete apple tweet]: https://twitter.com/steipete/status/667247213236629504
[macworld article wwdc pdf annotations in ios 7]: http://www.macworld.com/article/2041306/27-new-ios-7-features-apple-didnt-talk-about.html
[`cgcontextdrawpdfpage`]: https://developer.apple.com/library/mac/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/dq_pdf/dq_pdf.html
[pdf viewer]: https://pdfviewer.io/
[adobe acrobat reader]: https://itunes.apple.com/app/adobe-acrobat-reader/id469337564?mt=8
[pdf expert]: https://itunes.apple.com/app/pdf-expert-5-formulare-ausfullen/id743974925?mt=8
[iannotate]: https://itunes.apple.com/app/iannotate-pdf/id363998953?mt=8
[goodreader]: https://itunes.apple.com/app/goodreader/id777310222?mt=8
[tiny pdf]: https://itunes.apple.com/app/tiny-pdf-pdf-reader-fill-forms/id596655478?mt=8
[pdf box]: https://itunes.apple.com/app/pdf-box/id647697055?mt=8
[pspdfkit apps using pspdfkit]: /#showcase
[replies article]: /guides/ios/current/annotations/replies/
[android api pdfrenderer]: https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.html
[mupdf]: http://mupdf.com/
[vudroid]: https://code.google.com/p/vudroid/
[apv]: https://code.google.com/p/apv/
[apdfviewer]: https://code.google.com/p/apdfviewer/
[poppler]: http://poppler.freedesktop.org/
[itext]: http://itextpdf.com/
[adobe acrobat]: https://play.google.com/store/apps/details?id=com.adobe.reader
[google pdf viewer]: https://play.google.com/store/apps/details?id=com.google.android.apps.pdfviewer
[pspdfkit for web]: https://pspdfkit.com/web/
[pdfkit migration guide]: https://pspdfkit.com/guides/ios/current/migration-guides/migrating-from-apple-pdfkit/
