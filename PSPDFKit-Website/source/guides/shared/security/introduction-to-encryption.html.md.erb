---
title: Introduction to Encryption
section: developers
order: 1
---

In PSPDFKit, default PDF password encryption is supported. If you open a PDF document that is password protected, PSPDFKit will show a password prompt to unlock the document. <% if ios? %>(The password can also be set programmatically via [`unlockWithPassword:`][].)<% end %>

<% if android? %>> **ðŸ’¡ Tip:** A PDF document can also be opened with a password preconfigured via [`openDocument(context, Uri, password)`][].<% end %>

By selecting the Acrobat 3 and later option when creating an encrypted PDF, a low encryption level (40â€‘bit RC4) is used, while the other options use a high encryption level (128â€‘bit RC4 or AES). Acrobat 9.0 and later encrypts the document using the AES encryption algorithm with a 256-bit key size. <% if ios? %>iOS, including version 8<% end %><% if android? %>Android, including version 5.1<% end %>, does not yet support the Acrobat 9.0+ style encryption.

### Owner and User Passwords

A PDF file can have multiple security-related options set. The owner password generally controls the editing of a document and is required as soon as you want to encrypt a document of any kind. The user password prevents users from viewing the PDF. Itâ€™s optional, but if you specify it, you also need to specify an owner password. Check out our [Document Processing guide][] for more details on how to create a password-protected document using PSPDFKit.

### Encryption Algorithms

PSPDFKit supports RC4 and AES encryption algorithms.

RC4 is a proprietary encryption algorithm of RSA Security Inc. It is a symmetric stream cipher â€” i.e. the same algorithm is used for both encryption and decryption, and the algorithm does not change the length of the data.

AES support was introduced with PDF 1.6. It is a symmetric block cipher â€” i.e. the same algorithm is used for both encryption and decryption, and the length of the data when encrypted is rounded up to a multiple of the block size, which, in this implementation, is fixed to always be 16 bytes.

| Encryption Algorithm | PDF and Acrobat Version                   |
| -------------------- | ----------------------------------------- |
| RC4 40-bit           | PDF 1.1 â€“ 1.3 (Acrobat 2-4)               |
| RC4 128-bit          | PDF 1.4 â€“ 1.5 (Acrobat 5-6)               |
| AES 128-bit          | PDF 1.6 â€“ 1.7 = ISO 32000-1 (Acrobat 7-8) |

## PSPDFKit Supports Fast, In-Memory AES-256 Decryption

PSPDFKit is able to add an additional layer of security with support of state-of-the-art, fast, in-memory [AES-256][wikipedia article aes256] decryption using the <% if ios? %>[`PSPDFAESCryptoDataProvider`][]<% end %><% if android? %>[`AesDataProvider`][]<% end %> class. <% if ios? %>You can encrypt an entire file with a password and salt, and by using 10,000 [PBKDF][wikipedia article pbkdf] iterations, the file is well protected against brute-force attacks ([unlike solutions from Adobe][macworld pdf article]). We also provide the AES Crypt Mac app that encrypts your PDF documents. Unlike `NSData`-based solutions,<% end %><% if android? %> Unlike other solutions,<% end %> the PDF is never _fully_ decrypted, and this even works with very large (> 500&nbsp;MB) documents. The file also will never be written out unencrypted to disk<% if android? %>. For more details, look at our [AES Data Provider guide][].<% end %><% if ios? %>, and the cache is automatically disabled for encrypted content.

[==

```swift
// Note: For shipping apps, you need to protect this string better,
// in order to make it more difficult for a hacker to simply disassemble and receive
// the key from the binary. Or, add an internet service that fetches the key from
// an SSL API. But then there's still the slight risk of memory dumping
// with an attached GDB. Or screenshots. Security is never 100 percent perfect,
// but using AES makes it way harder to get the PDF. You can even
// combine AES and a PDF password.
let passphrase = "afghadÃ¶ghdgdhfgÃ¶hapvuenrÃ¶aoeruhfÃ¶aeiruaerub"
let salt = "ducrXn9WaRdpaBfMjDTJVjUf3FApA6gtim0e61LeSGWV9sTxB0r26mPs59Lbcexn"

// Generate the crypto data provider.
guard let encryptedPDF = Bundle.main.resourceURL?.appendingPathComponent("encrypted.pdf.aes"),
    let cryptoDataProvider = PSPDFAESCryptoDataProvider(url: encryptedPDF, passphraseProvider: { passphrase }, salt: salt, rounds: PSPDFDefaultPBKDFNumberOfRounds) else {
        return
}

// Create the `PSPDFDocument`.
let document = PSPDFDocument(dataProviders: [cryptoDataProvider])
document.uid = encryptedPDF.lastPathComponent // Manually set a UID for encrypted documents.

// `PSPDFAESCryptoDataProvider` automatically disables `useDiskCache` to restrict using the disk cache for encrypted documents.
// If you use a custom crypto solution, don't forget to disable `useDiskCache` on your custom data provider or on the document,
// in order to avoid leaking out encrypted data as cached images.
// document.useDiskCache = false

// Show the controller.
let pdfController = PSPDFViewController(document: document)
navigationController.pushViewController(pdfController, animated: true)
```

```objc
// Note: For shipping apps, you need to protect this string better,
// in order to make it more difficult for a hacker to simply disassemble and receive
// the key from the binary. Or, add an internet service that fetches the key from
// an SSL API. But then there's still the slight risk of memory dumping
// with an attached GDB. Or screenshots. Security is never 100 percent perfect,
// but using AES makes it way harder to get the PDF. You can even
// combine AES and a PDF password.
NSString *passphrase = @"afghadÃ¶ghdgdhfgÃ¶hapvuenrÃ¶aoeruhfÃ¶aeiruaerub";
NSString *salt = @"ducrXn9WaRdpaBfMjDTJVjUf3FApA6gtim0e61LeSGWV9sTxB0r26mPs59Lbcexn";

// Generate the crypto data provider.
NSURL *encryptedPDF = [[[NSBundle mainBundle] resourceURL] URLByAppendingPathComponent:@"encrypted.pdf.aes"];
PSPDFAESCryptoDataProvider *cryptoDataProvider = [[PSPDFAESCryptoDataProvider alloc] initWithURL:encryptedPDF passphraseProvider:^{ return passphrase; } salt:salt rounds:PSPDFDefaultPBKDFNumberOfRounds];

// Create the `PSPDFDocument`.
PSPDFDocument *document = [[PSPDFDocument alloc] initWithDataProviders:@[cryptoDataProvider]];
document.UID = encryptedPDF.lastPathComponent; // Manually set a UID for encrypted documents.

// `PSPDFAESCryptoDataProvider` automatically disables `useDiskCache` to restrict using the disk cache for encrypted documents.
// If you use a custom crypto solution, don't forget to disable `useDiskCache` on your custom data provider or on the document,
// in order to avoid leaking out encrypted data as cached images.
// document.useDiskCache = NO;

// Show the controller.
PSPDFViewController *pdfController = [[PSPDFViewController alloc] initWithDocument:document];
[self.navigationController pushViewController:pdfController animated:YES];
```

==]<% end %>

[`unlockwithpassword:`]: https://pspdfkit.com/api/ios/Classes/PSPDFDocument.html#/c:objc(cs)PSPDFDocument(im)unlockWithPassword:
[`opendocument(context, uri, password)`]: https://pspdfkit.com/api/android/reference/com/pspdfkit/document/PdfDocumentLoader.html#openDocument(android.content.Context,%20android.net.Uri,%20java.lang.String)
[wikipedia article aes256]: http://en.wikipedia.org/wiki/AES256
[`pspdfaescryptodataprovider`]: https://pspdfkit.com/api/Classes/PSPDFAESCryptoDataProvider.html
[`aesdataprovider`]: ../../security/aesdataprovider/
[aes data provider guide]: ../../security/aesdataprovider/
[wikipedia article pbkdf]: http://en.wikipedia.org/wiki/PBKDF2
[macworld pdf article]: http://www.macworld.com/article/1137343/pdf.html

[document processing guide]: ../../features/document-processing/<% if ios? %>#creating-a-password-protected-document<% end %><% if android? %>#protecting-a-document-with-a-password<% end %>
