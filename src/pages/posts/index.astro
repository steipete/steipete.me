---
import { getCollection } from "astro:content";
import Main from "@/layouts/Main.astro";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Card from "@/components/Card.astro";
import getPostsByGroupCondition from "@/utils/getPostsByGroupCondition";
import { SITE } from "@/consts";

const posts = await getCollection("blog", ({ data }) => !data.draft);

const months = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];
---

<Layout title={`Posts | ${SITE.title}`}>
  <Header />
  <Main>
    {
      Object.entries(
        getPostsByGroupCondition(posts, (post) => {
          const pubDate = post.data.pubDatetime || new Date();
          return new Date(pubDate).getFullYear();
        }),
      )
        .sort(([yearA], [yearB]) => Number(yearB) - Number(yearA))
        .map(([year, yearGroup]) => (
          <div>
            <span class="text-2xl font-bold">{year}</span>
            <sup class="text-sm">{yearGroup.length}</sup>
            {Object.entries(
              getPostsByGroupCondition(yearGroup, (post) => {
                const pubDate = post.data.pubDatetime || new Date();
                return new Date(pubDate).getMonth() + 1;
              }),
            )
              .sort(([monthA], [monthB]) => Number(monthB) - Number(monthA))
              .map(([month, monthGroup]) => (
                <div class="flex flex-col sm:flex-row">
                  <div class="mt-6 min-w-36 text-lg sm:my-6">
                    <span class="font-bold">{months[Number(month) - 1]}</span>
                    <sup class="text-xs">{monthGroup.length}</sup>
                  </div>
                  <ul>
                    {monthGroup
                      .sort((a, b) => {
                        const aDate = a.data.pubDatetime || new Date();
                        const bDate = b.data.pubDatetime || new Date();
                        return (
                          Math.floor(new Date(bDate).getTime() / 1000) -
                          Math.floor(new Date(aDate).getTime() / 1000)
                        );
                      })
                      .map((data) => (
                        <Card {...data} />
                      ))}
                  </ul>
                </div>
              ))}
          </div>
        ))
    }
  </Main>
  <Footer />
</Layout>
