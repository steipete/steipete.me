---
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  
  return posts.flatMap(post => {
    // Try to extract date components from slug if it follows the pattern YYYY-MM-DD-slug
    const slugMatch = post.slug.match(/^(\d{4})-(\d{2})-(\d{2})-(.*)/);
    
    if (slugMatch) {
      const [_, year, month, day, slug] = slugMatch;
      
      // Return a path for the old WordPress-style URL
      return {
        params: { 
          year, 
          month, 
          day, 
          slug 
        },
        props: { 
          post,
          targetYear: year,
          targetSlug: slug
        }
      };
    }
    
    // If it doesn't follow the pattern, look at the pubDate
    const pubDate = post.data.pubDate || post.data.date;
    if (pubDate) {
      const year = pubDate.getFullYear().toString();
      const month = (pubDate.getMonth() + 1).toString().padStart(2, '0');
      const day = pubDate.getDate().toString().padStart(2, '0');
      const slug = post.slug.replace(/^\d{4}-\d{2}-\d{2}-/, '');
      
      return {
        params: { 
          year, 
          month, 
          day, 
          slug 
        },
        props: { 
          post,
          targetYear: year,
          targetSlug: slug
        }
      };
    }
    
    // If no date info available, return empty array (flatMap will flatten this)
    return [];
  });
}

const { targetYear, targetSlug } = Astro.props;

// Redirect to the new URL format with year
return Astro.redirect(`/posts/${targetYear}/${targetSlug}/`, 301);
---
EOF < /dev/null