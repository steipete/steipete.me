---
import type { CollectionEntry } from 'astro:content'
import FormattedDate from '../components/FormattedDate.astro'
import Layout from './Layout.astro'

type Props = CollectionEntry<'blog'>['data'] & {
  slug: string
}

const { title, description, pubDate, updatedDate, heroImage, slug } = Astro.props

// Enforce canonical URL to always be /posts/ path
const canonicalPath = `/posts/${slug}/`;
const canonicalURL = new URL(canonicalPath, Astro.site);
---

<Layout title={title} description={description} canonicalURL={canonicalURL}>
  <article class="prose max-w-none">
    <div class="not-prose mb-8">
      <h1 class="text-4xl font-bold tracking-tight mb-2">
        {title}
      </h1>

      <div class="flex items-center gap-x-2 text-sm text-gray-500 dark:text-gray-400">
        <FormattedDate date={pubDate} />
        {
          updatedDate && (
            <>
              <span>â€¢</span>
              <span>
                Updated on <FormattedDate date={updatedDate} />
              </span>
            </>
          )
        }
      </div>
    </div>

    {
      heroImage && (
        <img
          src={heroImage}
          alt=""
          class="mb-8 aspect-video w-full rounded-md object-cover"
        />
      )
    }

    <div class="mdx-content">
      <slot />
    </div>
  </article>

  <script>
    // Find all Twitter and YouTube embed placeholders and replace them with the actual components
    document.addEventListener('DOMContentLoaded', () => {
      const mdxContent = document.querySelector('.mdx-content');
      if (!mdxContent) return;

      // Look for paragraphs with Twitter embeds
      const twitterEmbedRegex = /{% twitter (https:\/\/[^\s]+) %}/;
      // Look for paragraphs with YouTube embeds
      const youtubeEmbedRegex = /{% youtube (https:\/\/[^\s]+|[a-zA-Z0-9_-]+) %}/;

      // Find all paragraphs that might contain embeds
      const paragraphs = mdxContent.querySelectorAll('p');

      let foundTwitterEmbeds = false;
      let foundYoutubeEmbeds = false;

      paragraphs.forEach(paragraph => {
        const content = paragraph.innerHTML;
        const twitterMatch = content.match(twitterEmbedRegex);
        const youtubeMatch = content.match(youtubeEmbedRegex);

        if (twitterMatch && twitterMatch[1]) {
          foundTwitterEmbeds = true;
          const tweetUrl = twitterMatch[1];

          // Create a placeholder for the tweet
          const placeholder = document.createElement('div');
          placeholder.className = 'twitter-tweet-placeholder';
          placeholder.dataset.tweetUrl = tweetUrl;
          placeholder.innerHTML = `
            <blockquote class="twitter-tweet">
              <a href="${tweetUrl}">Loading tweet...</a>
            </blockquote>
          `;

          // Replace the paragraph with our placeholder
          paragraph.replaceWith(placeholder);
        }
        else if (youtubeMatch && youtubeMatch[1]) {
          foundYoutubeEmbeds = true;
          let videoId = youtubeMatch[1];

          // Extract video ID from URL if needed
          if (videoId.includes('youtube.com/watch')) {
            const url = new URL(videoId);
            videoId = url.searchParams.get('v') || '';
          }
          else if (videoId.includes('youtu.be/')) {
            videoId = videoId.split('youtu.be/')[1]?.split('?')[0] || '';
          }
          else if (videoId.includes('youtube.com/embed/')) {
            videoId = videoId.split('youtube.com/embed/')[1]?.split('?')[0] || '';
          }

          // Create responsive container for the YouTube iframe
          const container = document.createElement('div');
          container.className = 'youtube-embed-container';
          container.innerHTML = `
            <iframe
              width="560"
              height="315"
              src="https://www.youtube.com/embed/${videoId}"
              title="YouTube video player"
              frameborder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowfullscreen
            ></iframe>
          `;

          // Replace the paragraph with our container
          paragraph.replaceWith(container);
        }
      });

      // Only load the Twitter widgets script if we found Twitter embeds
      if (foundTwitterEmbeds) {
        const script = document.createElement('script');
        script.src = 'https://platform.twitter.com/widgets.js';
        script.async = true;
        document.head.appendChild(script);
      }
    });
  </script>

  <style>
    .twitter-tweet-placeholder {
      margin: 1.5rem 0;
      display: flex;
      justify-content: center;
    }

    .youtube-embed-container {
      margin: 2rem 0;
      position: relative;
      width: 100%;
      padding-bottom: 56.25%; /* 16:9 aspect ratio */
      height: 0;
      overflow: hidden;
    }

    .youtube-embed-container iframe {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border: 0;
    }
  </style>
</Layout>