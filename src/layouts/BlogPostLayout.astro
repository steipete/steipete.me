---
import type { CollectionEntry } from 'astro:content'
import FormattedDate from '../components/FormattedDate.astro'
import Layout from './Layout.astro'

type Props = CollectionEntry<'blog'>['data'] & {
  slug: string
}

const { title, description, pubDate, updatedDate, heroImage, slug } = Astro.props

// Enforce canonical URL to always be /posts/ path
const canonicalPath = `/posts/${slug}/`;
const canonicalURL = new URL(canonicalPath, Astro.site);
---

<Layout title={title} description={description} canonicalURL={canonicalURL}>
  <article class="prose max-w-none">
    <div class="not-prose mb-8">
      <h1 class="text-4xl font-bold tracking-tight mb-2">
        {title}
      </h1>

      <div class="flex items-center gap-x-2 text-sm text-gray-500 dark:text-gray-400">
        <FormattedDate date={pubDate} />
        {
          updatedDate && (
            <>
              <span>â€¢</span>
              <span>
                Updated on <FormattedDate date={updatedDate} />
              </span>
            </>
          )
        }
      </div>
    </div>

    {
      heroImage && (
        <img
          src={heroImage}
          alt=""
          class="mb-8 aspect-video w-full rounded-md object-cover"
        />
      )
    }

    <div class="mdx-content">
      <slot />
    </div>
  </article>

  <script>
    // Find all Twitter embed placeholders and replace them with the actual component
    document.addEventListener('DOMContentLoaded', () => {
      const mdxContent = document.querySelector('.mdx-content');
      if (!mdxContent) return;

      // Look for paragraphs with Twitter embeds
      const twitterEmbedRegex = /{% twitter (https:\/\/[^\s]+) %}/;

      // Find all paragraphs that might contain a Twitter embed
      const paragraphs = mdxContent.querySelectorAll('p');

      let foundEmbeds = false;

      paragraphs.forEach(paragraph => {
        const content = paragraph.innerHTML;
        const match = content.match(twitterEmbedRegex);

        if (match && match[1]) {
          foundEmbeds = true;
          const tweetUrl = match[1];

          // Create a placeholder for the tweet
          const placeholder = document.createElement('div');
          placeholder.className = 'twitter-tweet-placeholder';
          placeholder.dataset.tweetUrl = tweetUrl;
          placeholder.innerHTML = `
            <blockquote class="twitter-tweet">
              <a href="${tweetUrl}">Loading tweet...</a>
            </blockquote>
          `;

          // Replace the paragraph with our placeholder
          paragraph.replaceWith(placeholder);
        }
      });

      // Only load the Twitter widgets script if we found embeds
      if (foundEmbeds) {
        const script = document.createElement('script');
        script.src = 'https://platform.twitter.com/widgets.js';
        script.async = true;
        document.head.appendChild(script);
      }
    });
  </script>

  <style>
    .twitter-tweet-placeholder {
      margin: 1.5rem 0;
      display: flex;
      justify-content: center;
    }
  </style>
</Layout>